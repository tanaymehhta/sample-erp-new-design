
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Deal
 * 
 */
export type Deal = $Result.DefaultSelection<Prisma.$DealPayload>
/**
 * Model DealSource
 * 
 */
export type DealSource = $Result.DefaultSelection<Prisma.$DealSourcePayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model SaleParty
 * 
 */
export type SaleParty = $Result.DefaultSelection<Prisma.$SalePartyPayload>
/**
 * Model PurchaseParty
 * 
 */
export type PurchaseParty = $Result.DefaultSelection<Prisma.$PurchasePartyPayload>
/**
 * Model Inventory
 * 
 */
export type Inventory = $Result.DefaultSelection<Prisma.$InventoryPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Deals
 * const deals = await prisma.deal.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Deals
   * const deals = await prisma.deal.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.deal`: Exposes CRUD operations for the **Deal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deals
    * const deals = await prisma.deal.findMany()
    * ```
    */
  get deal(): Prisma.DealDelegate<ExtArgs>;

  /**
   * `prisma.dealSource`: Exposes CRUD operations for the **DealSource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DealSources
    * const dealSources = await prisma.dealSource.findMany()
    * ```
    */
  get dealSource(): Prisma.DealSourceDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.saleParty`: Exposes CRUD operations for the **SaleParty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SaleParties
    * const saleParties = await prisma.saleParty.findMany()
    * ```
    */
  get saleParty(): Prisma.SalePartyDelegate<ExtArgs>;

  /**
   * `prisma.purchaseParty`: Exposes CRUD operations for the **PurchaseParty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseParties
    * const purchaseParties = await prisma.purchaseParty.findMany()
    * ```
    */
  get purchaseParty(): Prisma.PurchasePartyDelegate<ExtArgs>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **Inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.InventoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Deal: 'Deal',
    DealSource: 'DealSource',
    Product: 'Product',
    SaleParty: 'SaleParty',
    PurchaseParty: 'PurchaseParty',
    Inventory: 'Inventory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "deal" | "dealSource" | "product" | "saleParty" | "purchaseParty" | "inventory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Deal: {
        payload: Prisma.$DealPayload<ExtArgs>
        fields: Prisma.DealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload>
          }
          findFirst: {
            args: Prisma.DealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload>
          }
          findMany: {
            args: Prisma.DealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload>[]
          }
          create: {
            args: Prisma.DealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload>
          }
          createMany: {
            args: Prisma.DealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DealCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload>[]
          }
          delete: {
            args: Prisma.DealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload>
          }
          update: {
            args: Prisma.DealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload>
          }
          deleteMany: {
            args: Prisma.DealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealPayload>
          }
          aggregate: {
            args: Prisma.DealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeal>
          }
          groupBy: {
            args: Prisma.DealGroupByArgs<ExtArgs>
            result: $Utils.Optional<DealGroupByOutputType>[]
          }
          count: {
            args: Prisma.DealCountArgs<ExtArgs>
            result: $Utils.Optional<DealCountAggregateOutputType> | number
          }
        }
      }
      DealSource: {
        payload: Prisma.$DealSourcePayload<ExtArgs>
        fields: Prisma.DealSourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DealSourceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DealSourceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload>
          }
          findFirst: {
            args: Prisma.DealSourceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DealSourceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload>
          }
          findMany: {
            args: Prisma.DealSourceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload>[]
          }
          create: {
            args: Prisma.DealSourceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload>
          }
          createMany: {
            args: Prisma.DealSourceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DealSourceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload>[]
          }
          delete: {
            args: Prisma.DealSourceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload>
          }
          update: {
            args: Prisma.DealSourceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload>
          }
          deleteMany: {
            args: Prisma.DealSourceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DealSourceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DealSourceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DealSourcePayload>
          }
          aggregate: {
            args: Prisma.DealSourceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDealSource>
          }
          groupBy: {
            args: Prisma.DealSourceGroupByArgs<ExtArgs>
            result: $Utils.Optional<DealSourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.DealSourceCountArgs<ExtArgs>
            result: $Utils.Optional<DealSourceCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      SaleParty: {
        payload: Prisma.$SalePartyPayload<ExtArgs>
        fields: Prisma.SalePartyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SalePartyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalePartyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload>
          }
          findFirst: {
            args: Prisma.SalePartyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalePartyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload>
          }
          findMany: {
            args: Prisma.SalePartyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload>[]
          }
          create: {
            args: Prisma.SalePartyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload>
          }
          createMany: {
            args: Prisma.SalePartyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SalePartyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload>[]
          }
          delete: {
            args: Prisma.SalePartyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload>
          }
          update: {
            args: Prisma.SalePartyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload>
          }
          deleteMany: {
            args: Prisma.SalePartyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SalePartyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SalePartyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePartyPayload>
          }
          aggregate: {
            args: Prisma.SalePartyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSaleParty>
          }
          groupBy: {
            args: Prisma.SalePartyGroupByArgs<ExtArgs>
            result: $Utils.Optional<SalePartyGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalePartyCountArgs<ExtArgs>
            result: $Utils.Optional<SalePartyCountAggregateOutputType> | number
          }
        }
      }
      PurchaseParty: {
        payload: Prisma.$PurchasePartyPayload<ExtArgs>
        fields: Prisma.PurchasePartyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PurchasePartyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchasePartyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload>
          }
          findFirst: {
            args: Prisma.PurchasePartyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchasePartyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload>
          }
          findMany: {
            args: Prisma.PurchasePartyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload>[]
          }
          create: {
            args: Prisma.PurchasePartyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload>
          }
          createMany: {
            args: Prisma.PurchasePartyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PurchasePartyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload>[]
          }
          delete: {
            args: Prisma.PurchasePartyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload>
          }
          update: {
            args: Prisma.PurchasePartyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload>
          }
          deleteMany: {
            args: Prisma.PurchasePartyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PurchasePartyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PurchasePartyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PurchasePartyPayload>
          }
          aggregate: {
            args: Prisma.PurchasePartyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePurchaseParty>
          }
          groupBy: {
            args: Prisma.PurchasePartyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PurchasePartyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchasePartyCountArgs<ExtArgs>
            result: $Utils.Optional<PurchasePartyCountAggregateOutputType> | number
          }
        }
      }
      Inventory: {
        payload: Prisma.$InventoryPayload<ExtArgs>
        fields: Prisma.InventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findFirst: {
            args: Prisma.InventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findMany: {
            args: Prisma.InventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          create: {
            args: Prisma.InventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          createMany: {
            args: Prisma.InventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          delete: {
            args: Prisma.InventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          update: {
            args: Prisma.InventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.InventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DealCountOutputType
   */

  export type DealCountOutputType = {
    sources: number
  }

  export type DealCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sources?: boolean | DealCountOutputTypeCountSourcesArgs
  }

  // Custom InputTypes
  /**
   * DealCountOutputType without action
   */
  export type DealCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealCountOutputType
     */
    select?: DealCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DealCountOutputType without action
   */
  export type DealCountOutputTypeCountSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DealSourceWhereInput
  }


  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    dealSources: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dealSources?: boolean | InventoryCountOutputTypeCountDealSourcesArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountDealSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DealSourceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Deal
   */

  export type AggregateDeal = {
    _count: DealCountAggregateOutputType | null
    _avg: DealAvgAggregateOutputType | null
    _sum: DealSumAggregateOutputType | null
    _min: DealMinAggregateOutputType | null
    _max: DealMaxAggregateOutputType | null
  }

  export type DealAvgAggregateOutputType = {
    quantitySold: number | null
    saleRate: number | null
    purchaseQuantity: number | null
    purchaseRate: number | null
  }

  export type DealSumAggregateOutputType = {
    quantitySold: number | null
    saleRate: number | null
    purchaseQuantity: number | null
    purchaseRate: number | null
  }

  export type DealMinAggregateOutputType = {
    id: string | null
    date: string | null
    saleParty: string | null
    quantitySold: number | null
    saleRate: number | null
    deliveryTerms: string | null
    productCode: string | null
    grade: string | null
    company: string | null
    specificGrade: string | null
    saleSource: string | null
    purchaseParty: string | null
    purchaseQuantity: number | null
    purchaseRate: number | null
    saleComments: string | null
    purchaseComments: string | null
    finalComments: string | null
    warehouse: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DealMaxAggregateOutputType = {
    id: string | null
    date: string | null
    saleParty: string | null
    quantitySold: number | null
    saleRate: number | null
    deliveryTerms: string | null
    productCode: string | null
    grade: string | null
    company: string | null
    specificGrade: string | null
    saleSource: string | null
    purchaseParty: string | null
    purchaseQuantity: number | null
    purchaseRate: number | null
    saleComments: string | null
    purchaseComments: string | null
    finalComments: string | null
    warehouse: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DealCountAggregateOutputType = {
    id: number
    date: number
    saleParty: number
    quantitySold: number
    saleRate: number
    deliveryTerms: number
    productCode: number
    grade: number
    company: number
    specificGrade: number
    saleSource: number
    purchaseParty: number
    purchaseQuantity: number
    purchaseRate: number
    saleComments: number
    purchaseComments: number
    finalComments: number
    warehouse: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DealAvgAggregateInputType = {
    quantitySold?: true
    saleRate?: true
    purchaseQuantity?: true
    purchaseRate?: true
  }

  export type DealSumAggregateInputType = {
    quantitySold?: true
    saleRate?: true
    purchaseQuantity?: true
    purchaseRate?: true
  }

  export type DealMinAggregateInputType = {
    id?: true
    date?: true
    saleParty?: true
    quantitySold?: true
    saleRate?: true
    deliveryTerms?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    saleSource?: true
    purchaseParty?: true
    purchaseQuantity?: true
    purchaseRate?: true
    saleComments?: true
    purchaseComments?: true
    finalComments?: true
    warehouse?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DealMaxAggregateInputType = {
    id?: true
    date?: true
    saleParty?: true
    quantitySold?: true
    saleRate?: true
    deliveryTerms?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    saleSource?: true
    purchaseParty?: true
    purchaseQuantity?: true
    purchaseRate?: true
    saleComments?: true
    purchaseComments?: true
    finalComments?: true
    warehouse?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DealCountAggregateInputType = {
    id?: true
    date?: true
    saleParty?: true
    quantitySold?: true
    saleRate?: true
    deliveryTerms?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    saleSource?: true
    purchaseParty?: true
    purchaseQuantity?: true
    purchaseRate?: true
    saleComments?: true
    purchaseComments?: true
    finalComments?: true
    warehouse?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Deal to aggregate.
     */
    where?: DealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deals to fetch.
     */
    orderBy?: DealOrderByWithRelationInput | DealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Deals
    **/
    _count?: true | DealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DealAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DealSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DealMaxAggregateInputType
  }

  export type GetDealAggregateType<T extends DealAggregateArgs> = {
        [P in keyof T & keyof AggregateDeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeal[P]>
      : GetScalarType<T[P], AggregateDeal[P]>
  }




  export type DealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DealWhereInput
    orderBy?: DealOrderByWithAggregationInput | DealOrderByWithAggregationInput[]
    by: DealScalarFieldEnum[] | DealScalarFieldEnum
    having?: DealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DealCountAggregateInputType | true
    _avg?: DealAvgAggregateInputType
    _sum?: DealSumAggregateInputType
    _min?: DealMinAggregateInputType
    _max?: DealMaxAggregateInputType
  }

  export type DealGroupByOutputType = {
    id: string
    date: string
    saleParty: string
    quantitySold: number
    saleRate: number
    deliveryTerms: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    saleSource: string
    purchaseParty: string
    purchaseQuantity: number
    purchaseRate: number
    saleComments: string | null
    purchaseComments: string | null
    finalComments: string | null
    warehouse: string | null
    createdAt: Date
    updatedAt: Date
    _count: DealCountAggregateOutputType | null
    _avg: DealAvgAggregateOutputType | null
    _sum: DealSumAggregateOutputType | null
    _min: DealMinAggregateOutputType | null
    _max: DealMaxAggregateOutputType | null
  }

  type GetDealGroupByPayload<T extends DealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DealGroupByOutputType[P]>
            : GetScalarType<T[P], DealGroupByOutputType[P]>
        }
      >
    >


  export type DealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    saleParty?: boolean
    quantitySold?: boolean
    saleRate?: boolean
    deliveryTerms?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    saleSource?: boolean
    purchaseParty?: boolean
    purchaseQuantity?: boolean
    purchaseRate?: boolean
    saleComments?: boolean
    purchaseComments?: boolean
    finalComments?: boolean
    warehouse?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sources?: boolean | Deal$sourcesArgs<ExtArgs>
    _count?: boolean | DealCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deal"]>

  export type DealSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    saleParty?: boolean
    quantitySold?: boolean
    saleRate?: boolean
    deliveryTerms?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    saleSource?: boolean
    purchaseParty?: boolean
    purchaseQuantity?: boolean
    purchaseRate?: boolean
    saleComments?: boolean
    purchaseComments?: boolean
    finalComments?: boolean
    warehouse?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["deal"]>

  export type DealSelectScalar = {
    id?: boolean
    date?: boolean
    saleParty?: boolean
    quantitySold?: boolean
    saleRate?: boolean
    deliveryTerms?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    saleSource?: boolean
    purchaseParty?: boolean
    purchaseQuantity?: boolean
    purchaseRate?: boolean
    saleComments?: boolean
    purchaseComments?: boolean
    finalComments?: boolean
    warehouse?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sources?: boolean | Deal$sourcesArgs<ExtArgs>
    _count?: boolean | DealCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DealIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Deal"
    objects: {
      sources: Prisma.$DealSourcePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: string
      saleParty: string
      quantitySold: number
      saleRate: number
      deliveryTerms: string
      productCode: string
      grade: string
      company: string
      specificGrade: string
      saleSource: string
      purchaseParty: string
      purchaseQuantity: number
      purchaseRate: number
      saleComments: string | null
      purchaseComments: string | null
      finalComments: string | null
      warehouse: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["deal"]>
    composites: {}
  }

  type DealGetPayload<S extends boolean | null | undefined | DealDefaultArgs> = $Result.GetResult<Prisma.$DealPayload, S>

  type DealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DealFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DealCountAggregateInputType | true
    }

  export interface DealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Deal'], meta: { name: 'Deal' } }
    /**
     * Find zero or one Deal that matches the filter.
     * @param {DealFindUniqueArgs} args - Arguments to find a Deal
     * @example
     * // Get one Deal
     * const deal = await prisma.deal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DealFindUniqueArgs>(args: SelectSubset<T, DealFindUniqueArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Deal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DealFindUniqueOrThrowArgs} args - Arguments to find a Deal
     * @example
     * // Get one Deal
     * const deal = await prisma.deal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DealFindUniqueOrThrowArgs>(args: SelectSubset<T, DealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Deal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFindFirstArgs} args - Arguments to find a Deal
     * @example
     * // Get one Deal
     * const deal = await prisma.deal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DealFindFirstArgs>(args?: SelectSubset<T, DealFindFirstArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Deal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFindFirstOrThrowArgs} args - Arguments to find a Deal
     * @example
     * // Get one Deal
     * const deal = await prisma.deal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DealFindFirstOrThrowArgs>(args?: SelectSubset<T, DealFindFirstOrThrowArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Deals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deals
     * const deals = await prisma.deal.findMany()
     * 
     * // Get first 10 Deals
     * const deals = await prisma.deal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dealWithIdOnly = await prisma.deal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DealFindManyArgs>(args?: SelectSubset<T, DealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Deal.
     * @param {DealCreateArgs} args - Arguments to create a Deal.
     * @example
     * // Create one Deal
     * const Deal = await prisma.deal.create({
     *   data: {
     *     // ... data to create a Deal
     *   }
     * })
     * 
     */
    create<T extends DealCreateArgs>(args: SelectSubset<T, DealCreateArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Deals.
     * @param {DealCreateManyArgs} args - Arguments to create many Deals.
     * @example
     * // Create many Deals
     * const deal = await prisma.deal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DealCreateManyArgs>(args?: SelectSubset<T, DealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Deals and returns the data saved in the database.
     * @param {DealCreateManyAndReturnArgs} args - Arguments to create many Deals.
     * @example
     * // Create many Deals
     * const deal = await prisma.deal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Deals and only return the `id`
     * const dealWithIdOnly = await prisma.deal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DealCreateManyAndReturnArgs>(args?: SelectSubset<T, DealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Deal.
     * @param {DealDeleteArgs} args - Arguments to delete one Deal.
     * @example
     * // Delete one Deal
     * const Deal = await prisma.deal.delete({
     *   where: {
     *     // ... filter to delete one Deal
     *   }
     * })
     * 
     */
    delete<T extends DealDeleteArgs>(args: SelectSubset<T, DealDeleteArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Deal.
     * @param {DealUpdateArgs} args - Arguments to update one Deal.
     * @example
     * // Update one Deal
     * const deal = await prisma.deal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DealUpdateArgs>(args: SelectSubset<T, DealUpdateArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Deals.
     * @param {DealDeleteManyArgs} args - Arguments to filter Deals to delete.
     * @example
     * // Delete a few Deals
     * const { count } = await prisma.deal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DealDeleteManyArgs>(args?: SelectSubset<T, DealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deals
     * const deal = await prisma.deal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DealUpdateManyArgs>(args: SelectSubset<T, DealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Deal.
     * @param {DealUpsertArgs} args - Arguments to update or create a Deal.
     * @example
     * // Update or create a Deal
     * const deal = await prisma.deal.upsert({
     *   create: {
     *     // ... data to create a Deal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deal we want to update
     *   }
     * })
     */
    upsert<T extends DealUpsertArgs>(args: SelectSubset<T, DealUpsertArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Deals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealCountArgs} args - Arguments to filter Deals to count.
     * @example
     * // Count the number of Deals
     * const count = await prisma.deal.count({
     *   where: {
     *     // ... the filter for the Deals we want to count
     *   }
     * })
    **/
    count<T extends DealCountArgs>(
      args?: Subset<T, DealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DealAggregateArgs>(args: Subset<T, DealAggregateArgs>): Prisma.PrismaPromise<GetDealAggregateType<T>>

    /**
     * Group by Deal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DealGroupByArgs['orderBy'] }
        : { orderBy?: DealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Deal model
   */
  readonly fields: DealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Deal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sources<T extends Deal$sourcesArgs<ExtArgs> = {}>(args?: Subset<T, Deal$sourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Deal model
   */ 
  interface DealFieldRefs {
    readonly id: FieldRef<"Deal", 'String'>
    readonly date: FieldRef<"Deal", 'String'>
    readonly saleParty: FieldRef<"Deal", 'String'>
    readonly quantitySold: FieldRef<"Deal", 'Float'>
    readonly saleRate: FieldRef<"Deal", 'Float'>
    readonly deliveryTerms: FieldRef<"Deal", 'String'>
    readonly productCode: FieldRef<"Deal", 'String'>
    readonly grade: FieldRef<"Deal", 'String'>
    readonly company: FieldRef<"Deal", 'String'>
    readonly specificGrade: FieldRef<"Deal", 'String'>
    readonly saleSource: FieldRef<"Deal", 'String'>
    readonly purchaseParty: FieldRef<"Deal", 'String'>
    readonly purchaseQuantity: FieldRef<"Deal", 'Float'>
    readonly purchaseRate: FieldRef<"Deal", 'Float'>
    readonly saleComments: FieldRef<"Deal", 'String'>
    readonly purchaseComments: FieldRef<"Deal", 'String'>
    readonly finalComments: FieldRef<"Deal", 'String'>
    readonly warehouse: FieldRef<"Deal", 'String'>
    readonly createdAt: FieldRef<"Deal", 'DateTime'>
    readonly updatedAt: FieldRef<"Deal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Deal findUnique
   */
  export type DealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * Filter, which Deal to fetch.
     */
    where: DealWhereUniqueInput
  }

  /**
   * Deal findUniqueOrThrow
   */
  export type DealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * Filter, which Deal to fetch.
     */
    where: DealWhereUniqueInput
  }

  /**
   * Deal findFirst
   */
  export type DealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * Filter, which Deal to fetch.
     */
    where?: DealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deals to fetch.
     */
    orderBy?: DealOrderByWithRelationInput | DealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Deals.
     */
    cursor?: DealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Deals.
     */
    distinct?: DealScalarFieldEnum | DealScalarFieldEnum[]
  }

  /**
   * Deal findFirstOrThrow
   */
  export type DealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * Filter, which Deal to fetch.
     */
    where?: DealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deals to fetch.
     */
    orderBy?: DealOrderByWithRelationInput | DealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Deals.
     */
    cursor?: DealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Deals.
     */
    distinct?: DealScalarFieldEnum | DealScalarFieldEnum[]
  }

  /**
   * Deal findMany
   */
  export type DealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * Filter, which Deals to fetch.
     */
    where?: DealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Deals to fetch.
     */
    orderBy?: DealOrderByWithRelationInput | DealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Deals.
     */
    cursor?: DealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Deals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Deals.
     */
    skip?: number
    distinct?: DealScalarFieldEnum | DealScalarFieldEnum[]
  }

  /**
   * Deal create
   */
  export type DealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * The data needed to create a Deal.
     */
    data: XOR<DealCreateInput, DealUncheckedCreateInput>
  }

  /**
   * Deal createMany
   */
  export type DealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Deals.
     */
    data: DealCreateManyInput | DealCreateManyInput[]
  }

  /**
   * Deal createManyAndReturn
   */
  export type DealCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Deals.
     */
    data: DealCreateManyInput | DealCreateManyInput[]
  }

  /**
   * Deal update
   */
  export type DealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * The data needed to update a Deal.
     */
    data: XOR<DealUpdateInput, DealUncheckedUpdateInput>
    /**
     * Choose, which Deal to update.
     */
    where: DealWhereUniqueInput
  }

  /**
   * Deal updateMany
   */
  export type DealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Deals.
     */
    data: XOR<DealUpdateManyMutationInput, DealUncheckedUpdateManyInput>
    /**
     * Filter which Deals to update
     */
    where?: DealWhereInput
  }

  /**
   * Deal upsert
   */
  export type DealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * The filter to search for the Deal to update in case it exists.
     */
    where: DealWhereUniqueInput
    /**
     * In case the Deal found by the `where` argument doesn't exist, create a new Deal with this data.
     */
    create: XOR<DealCreateInput, DealUncheckedCreateInput>
    /**
     * In case the Deal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DealUpdateInput, DealUncheckedUpdateInput>
  }

  /**
   * Deal delete
   */
  export type DealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
    /**
     * Filter which Deal to delete.
     */
    where: DealWhereUniqueInput
  }

  /**
   * Deal deleteMany
   */
  export type DealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Deals to delete
     */
    where?: DealWhereInput
  }

  /**
   * Deal.sources
   */
  export type Deal$sourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    where?: DealSourceWhereInput
    orderBy?: DealSourceOrderByWithRelationInput | DealSourceOrderByWithRelationInput[]
    cursor?: DealSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DealSourceScalarFieldEnum | DealSourceScalarFieldEnum[]
  }

  /**
   * Deal without action
   */
  export type DealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Deal
     */
    select?: DealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealInclude<ExtArgs> | null
  }


  /**
   * Model DealSource
   */

  export type AggregateDealSource = {
    _count: DealSourceCountAggregateOutputType | null
    _avg: DealSourceAvgAggregateOutputType | null
    _sum: DealSourceSumAggregateOutputType | null
    _min: DealSourceMinAggregateOutputType | null
    _max: DealSourceMaxAggregateOutputType | null
  }

  export type DealSourceAvgAggregateOutputType = {
    quantityUsed: number | null
    costPerKg: number | null
    selectionOrder: number | null
  }

  export type DealSourceSumAggregateOutputType = {
    quantityUsed: number | null
    costPerKg: number | null
    selectionOrder: number | null
  }

  export type DealSourceMinAggregateOutputType = {
    id: string | null
    dealId: string | null
    inventoryId: string | null
    quantityUsed: number | null
    costPerKg: number | null
    supplierName: string | null
    selectionOrder: number | null
    createdAt: Date | null
  }

  export type DealSourceMaxAggregateOutputType = {
    id: string | null
    dealId: string | null
    inventoryId: string | null
    quantityUsed: number | null
    costPerKg: number | null
    supplierName: string | null
    selectionOrder: number | null
    createdAt: Date | null
  }

  export type DealSourceCountAggregateOutputType = {
    id: number
    dealId: number
    inventoryId: number
    quantityUsed: number
    costPerKg: number
    supplierName: number
    selectionOrder: number
    createdAt: number
    _all: number
  }


  export type DealSourceAvgAggregateInputType = {
    quantityUsed?: true
    costPerKg?: true
    selectionOrder?: true
  }

  export type DealSourceSumAggregateInputType = {
    quantityUsed?: true
    costPerKg?: true
    selectionOrder?: true
  }

  export type DealSourceMinAggregateInputType = {
    id?: true
    dealId?: true
    inventoryId?: true
    quantityUsed?: true
    costPerKg?: true
    supplierName?: true
    selectionOrder?: true
    createdAt?: true
  }

  export type DealSourceMaxAggregateInputType = {
    id?: true
    dealId?: true
    inventoryId?: true
    quantityUsed?: true
    costPerKg?: true
    supplierName?: true
    selectionOrder?: true
    createdAt?: true
  }

  export type DealSourceCountAggregateInputType = {
    id?: true
    dealId?: true
    inventoryId?: true
    quantityUsed?: true
    costPerKg?: true
    supplierName?: true
    selectionOrder?: true
    createdAt?: true
    _all?: true
  }

  export type DealSourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DealSource to aggregate.
     */
    where?: DealSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealSources to fetch.
     */
    orderBy?: DealSourceOrderByWithRelationInput | DealSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DealSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DealSources
    **/
    _count?: true | DealSourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DealSourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DealSourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DealSourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DealSourceMaxAggregateInputType
  }

  export type GetDealSourceAggregateType<T extends DealSourceAggregateArgs> = {
        [P in keyof T & keyof AggregateDealSource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDealSource[P]>
      : GetScalarType<T[P], AggregateDealSource[P]>
  }




  export type DealSourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DealSourceWhereInput
    orderBy?: DealSourceOrderByWithAggregationInput | DealSourceOrderByWithAggregationInput[]
    by: DealSourceScalarFieldEnum[] | DealSourceScalarFieldEnum
    having?: DealSourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DealSourceCountAggregateInputType | true
    _avg?: DealSourceAvgAggregateInputType
    _sum?: DealSourceSumAggregateInputType
    _min?: DealSourceMinAggregateInputType
    _max?: DealSourceMaxAggregateInputType
  }

  export type DealSourceGroupByOutputType = {
    id: string
    dealId: string
    inventoryId: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt: Date
    _count: DealSourceCountAggregateOutputType | null
    _avg: DealSourceAvgAggregateOutputType | null
    _sum: DealSourceSumAggregateOutputType | null
    _min: DealSourceMinAggregateOutputType | null
    _max: DealSourceMaxAggregateOutputType | null
  }

  type GetDealSourceGroupByPayload<T extends DealSourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DealSourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DealSourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DealSourceGroupByOutputType[P]>
            : GetScalarType<T[P], DealSourceGroupByOutputType[P]>
        }
      >
    >


  export type DealSourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dealId?: boolean
    inventoryId?: boolean
    quantityUsed?: boolean
    costPerKg?: boolean
    supplierName?: boolean
    selectionOrder?: boolean
    createdAt?: boolean
    deal?: boolean | DealDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dealSource"]>

  export type DealSourceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dealId?: boolean
    inventoryId?: boolean
    quantityUsed?: boolean
    costPerKg?: boolean
    supplierName?: boolean
    selectionOrder?: boolean
    createdAt?: boolean
    deal?: boolean | DealDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dealSource"]>

  export type DealSourceSelectScalar = {
    id?: boolean
    dealId?: boolean
    inventoryId?: boolean
    quantityUsed?: boolean
    costPerKg?: boolean
    supplierName?: boolean
    selectionOrder?: boolean
    createdAt?: boolean
  }

  export type DealSourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deal?: boolean | DealDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type DealSourceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deal?: boolean | DealDefaultArgs<ExtArgs>
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }

  export type $DealSourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DealSource"
    objects: {
      deal: Prisma.$DealPayload<ExtArgs>
      inventory: Prisma.$InventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dealId: string
      inventoryId: string
      quantityUsed: number
      costPerKg: number
      supplierName: string
      selectionOrder: number
      createdAt: Date
    }, ExtArgs["result"]["dealSource"]>
    composites: {}
  }

  type DealSourceGetPayload<S extends boolean | null | undefined | DealSourceDefaultArgs> = $Result.GetResult<Prisma.$DealSourcePayload, S>

  type DealSourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DealSourceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DealSourceCountAggregateInputType | true
    }

  export interface DealSourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DealSource'], meta: { name: 'DealSource' } }
    /**
     * Find zero or one DealSource that matches the filter.
     * @param {DealSourceFindUniqueArgs} args - Arguments to find a DealSource
     * @example
     * // Get one DealSource
     * const dealSource = await prisma.dealSource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DealSourceFindUniqueArgs>(args: SelectSubset<T, DealSourceFindUniqueArgs<ExtArgs>>): Prisma__DealSourceClient<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DealSource that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DealSourceFindUniqueOrThrowArgs} args - Arguments to find a DealSource
     * @example
     * // Get one DealSource
     * const dealSource = await prisma.dealSource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DealSourceFindUniqueOrThrowArgs>(args: SelectSubset<T, DealSourceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DealSourceClient<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DealSource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealSourceFindFirstArgs} args - Arguments to find a DealSource
     * @example
     * // Get one DealSource
     * const dealSource = await prisma.dealSource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DealSourceFindFirstArgs>(args?: SelectSubset<T, DealSourceFindFirstArgs<ExtArgs>>): Prisma__DealSourceClient<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DealSource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealSourceFindFirstOrThrowArgs} args - Arguments to find a DealSource
     * @example
     * // Get one DealSource
     * const dealSource = await prisma.dealSource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DealSourceFindFirstOrThrowArgs>(args?: SelectSubset<T, DealSourceFindFirstOrThrowArgs<ExtArgs>>): Prisma__DealSourceClient<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DealSources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealSourceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DealSources
     * const dealSources = await prisma.dealSource.findMany()
     * 
     * // Get first 10 DealSources
     * const dealSources = await prisma.dealSource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dealSourceWithIdOnly = await prisma.dealSource.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DealSourceFindManyArgs>(args?: SelectSubset<T, DealSourceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DealSource.
     * @param {DealSourceCreateArgs} args - Arguments to create a DealSource.
     * @example
     * // Create one DealSource
     * const DealSource = await prisma.dealSource.create({
     *   data: {
     *     // ... data to create a DealSource
     *   }
     * })
     * 
     */
    create<T extends DealSourceCreateArgs>(args: SelectSubset<T, DealSourceCreateArgs<ExtArgs>>): Prisma__DealSourceClient<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DealSources.
     * @param {DealSourceCreateManyArgs} args - Arguments to create many DealSources.
     * @example
     * // Create many DealSources
     * const dealSource = await prisma.dealSource.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DealSourceCreateManyArgs>(args?: SelectSubset<T, DealSourceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DealSources and returns the data saved in the database.
     * @param {DealSourceCreateManyAndReturnArgs} args - Arguments to create many DealSources.
     * @example
     * // Create many DealSources
     * const dealSource = await prisma.dealSource.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DealSources and only return the `id`
     * const dealSourceWithIdOnly = await prisma.dealSource.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DealSourceCreateManyAndReturnArgs>(args?: SelectSubset<T, DealSourceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DealSource.
     * @param {DealSourceDeleteArgs} args - Arguments to delete one DealSource.
     * @example
     * // Delete one DealSource
     * const DealSource = await prisma.dealSource.delete({
     *   where: {
     *     // ... filter to delete one DealSource
     *   }
     * })
     * 
     */
    delete<T extends DealSourceDeleteArgs>(args: SelectSubset<T, DealSourceDeleteArgs<ExtArgs>>): Prisma__DealSourceClient<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DealSource.
     * @param {DealSourceUpdateArgs} args - Arguments to update one DealSource.
     * @example
     * // Update one DealSource
     * const dealSource = await prisma.dealSource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DealSourceUpdateArgs>(args: SelectSubset<T, DealSourceUpdateArgs<ExtArgs>>): Prisma__DealSourceClient<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DealSources.
     * @param {DealSourceDeleteManyArgs} args - Arguments to filter DealSources to delete.
     * @example
     * // Delete a few DealSources
     * const { count } = await prisma.dealSource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DealSourceDeleteManyArgs>(args?: SelectSubset<T, DealSourceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DealSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealSourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DealSources
     * const dealSource = await prisma.dealSource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DealSourceUpdateManyArgs>(args: SelectSubset<T, DealSourceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DealSource.
     * @param {DealSourceUpsertArgs} args - Arguments to update or create a DealSource.
     * @example
     * // Update or create a DealSource
     * const dealSource = await prisma.dealSource.upsert({
     *   create: {
     *     // ... data to create a DealSource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DealSource we want to update
     *   }
     * })
     */
    upsert<T extends DealSourceUpsertArgs>(args: SelectSubset<T, DealSourceUpsertArgs<ExtArgs>>): Prisma__DealSourceClient<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DealSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealSourceCountArgs} args - Arguments to filter DealSources to count.
     * @example
     * // Count the number of DealSources
     * const count = await prisma.dealSource.count({
     *   where: {
     *     // ... the filter for the DealSources we want to count
     *   }
     * })
    **/
    count<T extends DealSourceCountArgs>(
      args?: Subset<T, DealSourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DealSourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DealSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealSourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DealSourceAggregateArgs>(args: Subset<T, DealSourceAggregateArgs>): Prisma.PrismaPromise<GetDealSourceAggregateType<T>>

    /**
     * Group by DealSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealSourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DealSourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DealSourceGroupByArgs['orderBy'] }
        : { orderBy?: DealSourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DealSourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDealSourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DealSource model
   */
  readonly fields: DealSourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DealSource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DealSourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    deal<T extends DealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DealDefaultArgs<ExtArgs>>): Prisma__DealClient<$Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DealSource model
   */ 
  interface DealSourceFieldRefs {
    readonly id: FieldRef<"DealSource", 'String'>
    readonly dealId: FieldRef<"DealSource", 'String'>
    readonly inventoryId: FieldRef<"DealSource", 'String'>
    readonly quantityUsed: FieldRef<"DealSource", 'Float'>
    readonly costPerKg: FieldRef<"DealSource", 'Float'>
    readonly supplierName: FieldRef<"DealSource", 'String'>
    readonly selectionOrder: FieldRef<"DealSource", 'Int'>
    readonly createdAt: FieldRef<"DealSource", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DealSource findUnique
   */
  export type DealSourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * Filter, which DealSource to fetch.
     */
    where: DealSourceWhereUniqueInput
  }

  /**
   * DealSource findUniqueOrThrow
   */
  export type DealSourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * Filter, which DealSource to fetch.
     */
    where: DealSourceWhereUniqueInput
  }

  /**
   * DealSource findFirst
   */
  export type DealSourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * Filter, which DealSource to fetch.
     */
    where?: DealSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealSources to fetch.
     */
    orderBy?: DealSourceOrderByWithRelationInput | DealSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DealSources.
     */
    cursor?: DealSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DealSources.
     */
    distinct?: DealSourceScalarFieldEnum | DealSourceScalarFieldEnum[]
  }

  /**
   * DealSource findFirstOrThrow
   */
  export type DealSourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * Filter, which DealSource to fetch.
     */
    where?: DealSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealSources to fetch.
     */
    orderBy?: DealSourceOrderByWithRelationInput | DealSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DealSources.
     */
    cursor?: DealSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DealSources.
     */
    distinct?: DealSourceScalarFieldEnum | DealSourceScalarFieldEnum[]
  }

  /**
   * DealSource findMany
   */
  export type DealSourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * Filter, which DealSources to fetch.
     */
    where?: DealSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DealSources to fetch.
     */
    orderBy?: DealSourceOrderByWithRelationInput | DealSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DealSources.
     */
    cursor?: DealSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DealSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DealSources.
     */
    skip?: number
    distinct?: DealSourceScalarFieldEnum | DealSourceScalarFieldEnum[]
  }

  /**
   * DealSource create
   */
  export type DealSourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * The data needed to create a DealSource.
     */
    data: XOR<DealSourceCreateInput, DealSourceUncheckedCreateInput>
  }

  /**
   * DealSource createMany
   */
  export type DealSourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DealSources.
     */
    data: DealSourceCreateManyInput | DealSourceCreateManyInput[]
  }

  /**
   * DealSource createManyAndReturn
   */
  export type DealSourceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DealSources.
     */
    data: DealSourceCreateManyInput | DealSourceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DealSource update
   */
  export type DealSourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * The data needed to update a DealSource.
     */
    data: XOR<DealSourceUpdateInput, DealSourceUncheckedUpdateInput>
    /**
     * Choose, which DealSource to update.
     */
    where: DealSourceWhereUniqueInput
  }

  /**
   * DealSource updateMany
   */
  export type DealSourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DealSources.
     */
    data: XOR<DealSourceUpdateManyMutationInput, DealSourceUncheckedUpdateManyInput>
    /**
     * Filter which DealSources to update
     */
    where?: DealSourceWhereInput
  }

  /**
   * DealSource upsert
   */
  export type DealSourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * The filter to search for the DealSource to update in case it exists.
     */
    where: DealSourceWhereUniqueInput
    /**
     * In case the DealSource found by the `where` argument doesn't exist, create a new DealSource with this data.
     */
    create: XOR<DealSourceCreateInput, DealSourceUncheckedCreateInput>
    /**
     * In case the DealSource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DealSourceUpdateInput, DealSourceUncheckedUpdateInput>
  }

  /**
   * DealSource delete
   */
  export type DealSourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    /**
     * Filter which DealSource to delete.
     */
    where: DealSourceWhereUniqueInput
  }

  /**
   * DealSource deleteMany
   */
  export type DealSourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DealSources to delete
     */
    where?: DealSourceWhereInput
  }

  /**
   * DealSource without action
   */
  export type DealSourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    productCode: string | null
    grade: string | null
    company: string | null
    specificGrade: string | null
    source: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    productCode: string | null
    grade: string | null
    company: string | null
    specificGrade: string | null
    source: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    productCode: number
    grade: number
    company: number
    specificGrade: number
    source: number
    _all: number
  }


  export type ProductMinAggregateInputType = {
    id?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    source?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    source?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    source?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    source: string
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    source?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    source?: boolean
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    source?: boolean
  }


  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productCode: string
      grade: string
      company: string
      specificGrade: string
      source: string
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly productCode: FieldRef<"Product", 'String'>
    readonly grade: FieldRef<"Product", 'String'>
    readonly company: FieldRef<"Product", 'String'>
    readonly specificGrade: FieldRef<"Product", 'String'>
    readonly source: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
  }


  /**
   * Model SaleParty
   */

  export type AggregateSaleParty = {
    _count: SalePartyCountAggregateOutputType | null
    _min: SalePartyMinAggregateOutputType | null
    _max: SalePartyMaxAggregateOutputType | null
  }

  export type SalePartyMinAggregateOutputType = {
    id: string | null
    partyName: string | null
    contactPerson: string | null
    phone: string | null
    email: string | null
    address: string | null
  }

  export type SalePartyMaxAggregateOutputType = {
    id: string | null
    partyName: string | null
    contactPerson: string | null
    phone: string | null
    email: string | null
    address: string | null
  }

  export type SalePartyCountAggregateOutputType = {
    id: number
    partyName: number
    contactPerson: number
    phone: number
    email: number
    address: number
    _all: number
  }


  export type SalePartyMinAggregateInputType = {
    id?: true
    partyName?: true
    contactPerson?: true
    phone?: true
    email?: true
    address?: true
  }

  export type SalePartyMaxAggregateInputType = {
    id?: true
    partyName?: true
    contactPerson?: true
    phone?: true
    email?: true
    address?: true
  }

  export type SalePartyCountAggregateInputType = {
    id?: true
    partyName?: true
    contactPerson?: true
    phone?: true
    email?: true
    address?: true
    _all?: true
  }

  export type SalePartyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleParty to aggregate.
     */
    where?: SalePartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleParties to fetch.
     */
    orderBy?: SalePartyOrderByWithRelationInput | SalePartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalePartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SaleParties
    **/
    _count?: true | SalePartyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalePartyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalePartyMaxAggregateInputType
  }

  export type GetSalePartyAggregateType<T extends SalePartyAggregateArgs> = {
        [P in keyof T & keyof AggregateSaleParty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSaleParty[P]>
      : GetScalarType<T[P], AggregateSaleParty[P]>
  }




  export type SalePartyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SalePartyWhereInput
    orderBy?: SalePartyOrderByWithAggregationInput | SalePartyOrderByWithAggregationInput[]
    by: SalePartyScalarFieldEnum[] | SalePartyScalarFieldEnum
    having?: SalePartyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalePartyCountAggregateInputType | true
    _min?: SalePartyMinAggregateInputType
    _max?: SalePartyMaxAggregateInputType
  }

  export type SalePartyGroupByOutputType = {
    id: string
    partyName: string
    contactPerson: string | null
    phone: string | null
    email: string | null
    address: string | null
    _count: SalePartyCountAggregateOutputType | null
    _min: SalePartyMinAggregateOutputType | null
    _max: SalePartyMaxAggregateOutputType | null
  }

  type GetSalePartyGroupByPayload<T extends SalePartyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SalePartyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalePartyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalePartyGroupByOutputType[P]>
            : GetScalarType<T[P], SalePartyGroupByOutputType[P]>
        }
      >
    >


  export type SalePartySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyName?: boolean
    contactPerson?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
  }, ExtArgs["result"]["saleParty"]>

  export type SalePartySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyName?: boolean
    contactPerson?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
  }, ExtArgs["result"]["saleParty"]>

  export type SalePartySelectScalar = {
    id?: boolean
    partyName?: boolean
    contactPerson?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
  }


  export type $SalePartyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SaleParty"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      partyName: string
      contactPerson: string | null
      phone: string | null
      email: string | null
      address: string | null
    }, ExtArgs["result"]["saleParty"]>
    composites: {}
  }

  type SalePartyGetPayload<S extends boolean | null | undefined | SalePartyDefaultArgs> = $Result.GetResult<Prisma.$SalePartyPayload, S>

  type SalePartyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SalePartyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SalePartyCountAggregateInputType | true
    }

  export interface SalePartyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SaleParty'], meta: { name: 'SaleParty' } }
    /**
     * Find zero or one SaleParty that matches the filter.
     * @param {SalePartyFindUniqueArgs} args - Arguments to find a SaleParty
     * @example
     * // Get one SaleParty
     * const saleParty = await prisma.saleParty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SalePartyFindUniqueArgs>(args: SelectSubset<T, SalePartyFindUniqueArgs<ExtArgs>>): Prisma__SalePartyClient<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SaleParty that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SalePartyFindUniqueOrThrowArgs} args - Arguments to find a SaleParty
     * @example
     * // Get one SaleParty
     * const saleParty = await prisma.saleParty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SalePartyFindUniqueOrThrowArgs>(args: SelectSubset<T, SalePartyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SalePartyClient<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SaleParty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalePartyFindFirstArgs} args - Arguments to find a SaleParty
     * @example
     * // Get one SaleParty
     * const saleParty = await prisma.saleParty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SalePartyFindFirstArgs>(args?: SelectSubset<T, SalePartyFindFirstArgs<ExtArgs>>): Prisma__SalePartyClient<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SaleParty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalePartyFindFirstOrThrowArgs} args - Arguments to find a SaleParty
     * @example
     * // Get one SaleParty
     * const saleParty = await prisma.saleParty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SalePartyFindFirstOrThrowArgs>(args?: SelectSubset<T, SalePartyFindFirstOrThrowArgs<ExtArgs>>): Prisma__SalePartyClient<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SaleParties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalePartyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SaleParties
     * const saleParties = await prisma.saleParty.findMany()
     * 
     * // Get first 10 SaleParties
     * const saleParties = await prisma.saleParty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salePartyWithIdOnly = await prisma.saleParty.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SalePartyFindManyArgs>(args?: SelectSubset<T, SalePartyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SaleParty.
     * @param {SalePartyCreateArgs} args - Arguments to create a SaleParty.
     * @example
     * // Create one SaleParty
     * const SaleParty = await prisma.saleParty.create({
     *   data: {
     *     // ... data to create a SaleParty
     *   }
     * })
     * 
     */
    create<T extends SalePartyCreateArgs>(args: SelectSubset<T, SalePartyCreateArgs<ExtArgs>>): Prisma__SalePartyClient<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SaleParties.
     * @param {SalePartyCreateManyArgs} args - Arguments to create many SaleParties.
     * @example
     * // Create many SaleParties
     * const saleParty = await prisma.saleParty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SalePartyCreateManyArgs>(args?: SelectSubset<T, SalePartyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SaleParties and returns the data saved in the database.
     * @param {SalePartyCreateManyAndReturnArgs} args - Arguments to create many SaleParties.
     * @example
     * // Create many SaleParties
     * const saleParty = await prisma.saleParty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SaleParties and only return the `id`
     * const salePartyWithIdOnly = await prisma.saleParty.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SalePartyCreateManyAndReturnArgs>(args?: SelectSubset<T, SalePartyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SaleParty.
     * @param {SalePartyDeleteArgs} args - Arguments to delete one SaleParty.
     * @example
     * // Delete one SaleParty
     * const SaleParty = await prisma.saleParty.delete({
     *   where: {
     *     // ... filter to delete one SaleParty
     *   }
     * })
     * 
     */
    delete<T extends SalePartyDeleteArgs>(args: SelectSubset<T, SalePartyDeleteArgs<ExtArgs>>): Prisma__SalePartyClient<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SaleParty.
     * @param {SalePartyUpdateArgs} args - Arguments to update one SaleParty.
     * @example
     * // Update one SaleParty
     * const saleParty = await prisma.saleParty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SalePartyUpdateArgs>(args: SelectSubset<T, SalePartyUpdateArgs<ExtArgs>>): Prisma__SalePartyClient<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SaleParties.
     * @param {SalePartyDeleteManyArgs} args - Arguments to filter SaleParties to delete.
     * @example
     * // Delete a few SaleParties
     * const { count } = await prisma.saleParty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SalePartyDeleteManyArgs>(args?: SelectSubset<T, SalePartyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SaleParties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalePartyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SaleParties
     * const saleParty = await prisma.saleParty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SalePartyUpdateManyArgs>(args: SelectSubset<T, SalePartyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SaleParty.
     * @param {SalePartyUpsertArgs} args - Arguments to update or create a SaleParty.
     * @example
     * // Update or create a SaleParty
     * const saleParty = await prisma.saleParty.upsert({
     *   create: {
     *     // ... data to create a SaleParty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SaleParty we want to update
     *   }
     * })
     */
    upsert<T extends SalePartyUpsertArgs>(args: SelectSubset<T, SalePartyUpsertArgs<ExtArgs>>): Prisma__SalePartyClient<$Result.GetResult<Prisma.$SalePartyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SaleParties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalePartyCountArgs} args - Arguments to filter SaleParties to count.
     * @example
     * // Count the number of SaleParties
     * const count = await prisma.saleParty.count({
     *   where: {
     *     // ... the filter for the SaleParties we want to count
     *   }
     * })
    **/
    count<T extends SalePartyCountArgs>(
      args?: Subset<T, SalePartyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalePartyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SaleParty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalePartyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalePartyAggregateArgs>(args: Subset<T, SalePartyAggregateArgs>): Prisma.PrismaPromise<GetSalePartyAggregateType<T>>

    /**
     * Group by SaleParty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalePartyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalePartyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalePartyGroupByArgs['orderBy'] }
        : { orderBy?: SalePartyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalePartyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalePartyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SaleParty model
   */
  readonly fields: SalePartyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SaleParty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SalePartyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SaleParty model
   */ 
  interface SalePartyFieldRefs {
    readonly id: FieldRef<"SaleParty", 'String'>
    readonly partyName: FieldRef<"SaleParty", 'String'>
    readonly contactPerson: FieldRef<"SaleParty", 'String'>
    readonly phone: FieldRef<"SaleParty", 'String'>
    readonly email: FieldRef<"SaleParty", 'String'>
    readonly address: FieldRef<"SaleParty", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SaleParty findUnique
   */
  export type SalePartyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * Filter, which SaleParty to fetch.
     */
    where: SalePartyWhereUniqueInput
  }

  /**
   * SaleParty findUniqueOrThrow
   */
  export type SalePartyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * Filter, which SaleParty to fetch.
     */
    where: SalePartyWhereUniqueInput
  }

  /**
   * SaleParty findFirst
   */
  export type SalePartyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * Filter, which SaleParty to fetch.
     */
    where?: SalePartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleParties to fetch.
     */
    orderBy?: SalePartyOrderByWithRelationInput | SalePartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleParties.
     */
    cursor?: SalePartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleParties.
     */
    distinct?: SalePartyScalarFieldEnum | SalePartyScalarFieldEnum[]
  }

  /**
   * SaleParty findFirstOrThrow
   */
  export type SalePartyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * Filter, which SaleParty to fetch.
     */
    where?: SalePartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleParties to fetch.
     */
    orderBy?: SalePartyOrderByWithRelationInput | SalePartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SaleParties.
     */
    cursor?: SalePartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SaleParties.
     */
    distinct?: SalePartyScalarFieldEnum | SalePartyScalarFieldEnum[]
  }

  /**
   * SaleParty findMany
   */
  export type SalePartyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * Filter, which SaleParties to fetch.
     */
    where?: SalePartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SaleParties to fetch.
     */
    orderBy?: SalePartyOrderByWithRelationInput | SalePartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SaleParties.
     */
    cursor?: SalePartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SaleParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SaleParties.
     */
    skip?: number
    distinct?: SalePartyScalarFieldEnum | SalePartyScalarFieldEnum[]
  }

  /**
   * SaleParty create
   */
  export type SalePartyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * The data needed to create a SaleParty.
     */
    data: XOR<SalePartyCreateInput, SalePartyUncheckedCreateInput>
  }

  /**
   * SaleParty createMany
   */
  export type SalePartyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SaleParties.
     */
    data: SalePartyCreateManyInput | SalePartyCreateManyInput[]
  }

  /**
   * SaleParty createManyAndReturn
   */
  export type SalePartyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SaleParties.
     */
    data: SalePartyCreateManyInput | SalePartyCreateManyInput[]
  }

  /**
   * SaleParty update
   */
  export type SalePartyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * The data needed to update a SaleParty.
     */
    data: XOR<SalePartyUpdateInput, SalePartyUncheckedUpdateInput>
    /**
     * Choose, which SaleParty to update.
     */
    where: SalePartyWhereUniqueInput
  }

  /**
   * SaleParty updateMany
   */
  export type SalePartyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SaleParties.
     */
    data: XOR<SalePartyUpdateManyMutationInput, SalePartyUncheckedUpdateManyInput>
    /**
     * Filter which SaleParties to update
     */
    where?: SalePartyWhereInput
  }

  /**
   * SaleParty upsert
   */
  export type SalePartyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * The filter to search for the SaleParty to update in case it exists.
     */
    where: SalePartyWhereUniqueInput
    /**
     * In case the SaleParty found by the `where` argument doesn't exist, create a new SaleParty with this data.
     */
    create: XOR<SalePartyCreateInput, SalePartyUncheckedCreateInput>
    /**
     * In case the SaleParty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalePartyUpdateInput, SalePartyUncheckedUpdateInput>
  }

  /**
   * SaleParty delete
   */
  export type SalePartyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
    /**
     * Filter which SaleParty to delete.
     */
    where: SalePartyWhereUniqueInput
  }

  /**
   * SaleParty deleteMany
   */
  export type SalePartyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SaleParties to delete
     */
    where?: SalePartyWhereInput
  }

  /**
   * SaleParty without action
   */
  export type SalePartyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SaleParty
     */
    select?: SalePartySelect<ExtArgs> | null
  }


  /**
   * Model PurchaseParty
   */

  export type AggregatePurchaseParty = {
    _count: PurchasePartyCountAggregateOutputType | null
    _min: PurchasePartyMinAggregateOutputType | null
    _max: PurchasePartyMaxAggregateOutputType | null
  }

  export type PurchasePartyMinAggregateOutputType = {
    id: string | null
    partyName: string | null
    contactPerson: string | null
    phone: string | null
    email: string | null
    address: string | null
  }

  export type PurchasePartyMaxAggregateOutputType = {
    id: string | null
    partyName: string | null
    contactPerson: string | null
    phone: string | null
    email: string | null
    address: string | null
  }

  export type PurchasePartyCountAggregateOutputType = {
    id: number
    partyName: number
    contactPerson: number
    phone: number
    email: number
    address: number
    _all: number
  }


  export type PurchasePartyMinAggregateInputType = {
    id?: true
    partyName?: true
    contactPerson?: true
    phone?: true
    email?: true
    address?: true
  }

  export type PurchasePartyMaxAggregateInputType = {
    id?: true
    partyName?: true
    contactPerson?: true
    phone?: true
    email?: true
    address?: true
  }

  export type PurchasePartyCountAggregateInputType = {
    id?: true
    partyName?: true
    contactPerson?: true
    phone?: true
    email?: true
    address?: true
    _all?: true
  }

  export type PurchasePartyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseParty to aggregate.
     */
    where?: PurchasePartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseParties to fetch.
     */
    orderBy?: PurchasePartyOrderByWithRelationInput | PurchasePartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchasePartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseParties
    **/
    _count?: true | PurchasePartyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchasePartyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchasePartyMaxAggregateInputType
  }

  export type GetPurchasePartyAggregateType<T extends PurchasePartyAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseParty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseParty[P]>
      : GetScalarType<T[P], AggregatePurchaseParty[P]>
  }




  export type PurchasePartyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PurchasePartyWhereInput
    orderBy?: PurchasePartyOrderByWithAggregationInput | PurchasePartyOrderByWithAggregationInput[]
    by: PurchasePartyScalarFieldEnum[] | PurchasePartyScalarFieldEnum
    having?: PurchasePartyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchasePartyCountAggregateInputType | true
    _min?: PurchasePartyMinAggregateInputType
    _max?: PurchasePartyMaxAggregateInputType
  }

  export type PurchasePartyGroupByOutputType = {
    id: string
    partyName: string
    contactPerson: string | null
    phone: string | null
    email: string | null
    address: string | null
    _count: PurchasePartyCountAggregateOutputType | null
    _min: PurchasePartyMinAggregateOutputType | null
    _max: PurchasePartyMaxAggregateOutputType | null
  }

  type GetPurchasePartyGroupByPayload<T extends PurchasePartyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PurchasePartyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchasePartyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchasePartyGroupByOutputType[P]>
            : GetScalarType<T[P], PurchasePartyGroupByOutputType[P]>
        }
      >
    >


  export type PurchasePartySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyName?: boolean
    contactPerson?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
  }, ExtArgs["result"]["purchaseParty"]>

  export type PurchasePartySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    partyName?: boolean
    contactPerson?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
  }, ExtArgs["result"]["purchaseParty"]>

  export type PurchasePartySelectScalar = {
    id?: boolean
    partyName?: boolean
    contactPerson?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
  }


  export type $PurchasePartyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PurchaseParty"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      partyName: string
      contactPerson: string | null
      phone: string | null
      email: string | null
      address: string | null
    }, ExtArgs["result"]["purchaseParty"]>
    composites: {}
  }

  type PurchasePartyGetPayload<S extends boolean | null | undefined | PurchasePartyDefaultArgs> = $Result.GetResult<Prisma.$PurchasePartyPayload, S>

  type PurchasePartyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PurchasePartyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PurchasePartyCountAggregateInputType | true
    }

  export interface PurchasePartyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseParty'], meta: { name: 'PurchaseParty' } }
    /**
     * Find zero or one PurchaseParty that matches the filter.
     * @param {PurchasePartyFindUniqueArgs} args - Arguments to find a PurchaseParty
     * @example
     * // Get one PurchaseParty
     * const purchaseParty = await prisma.purchaseParty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PurchasePartyFindUniqueArgs>(args: SelectSubset<T, PurchasePartyFindUniqueArgs<ExtArgs>>): Prisma__PurchasePartyClient<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PurchaseParty that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PurchasePartyFindUniqueOrThrowArgs} args - Arguments to find a PurchaseParty
     * @example
     * // Get one PurchaseParty
     * const purchaseParty = await prisma.purchaseParty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PurchasePartyFindUniqueOrThrowArgs>(args: SelectSubset<T, PurchasePartyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PurchasePartyClient<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PurchaseParty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchasePartyFindFirstArgs} args - Arguments to find a PurchaseParty
     * @example
     * // Get one PurchaseParty
     * const purchaseParty = await prisma.purchaseParty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PurchasePartyFindFirstArgs>(args?: SelectSubset<T, PurchasePartyFindFirstArgs<ExtArgs>>): Prisma__PurchasePartyClient<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PurchaseParty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchasePartyFindFirstOrThrowArgs} args - Arguments to find a PurchaseParty
     * @example
     * // Get one PurchaseParty
     * const purchaseParty = await prisma.purchaseParty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PurchasePartyFindFirstOrThrowArgs>(args?: SelectSubset<T, PurchasePartyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PurchasePartyClient<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PurchaseParties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchasePartyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseParties
     * const purchaseParties = await prisma.purchaseParty.findMany()
     * 
     * // Get first 10 PurchaseParties
     * const purchaseParties = await prisma.purchaseParty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchasePartyWithIdOnly = await prisma.purchaseParty.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PurchasePartyFindManyArgs>(args?: SelectSubset<T, PurchasePartyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PurchaseParty.
     * @param {PurchasePartyCreateArgs} args - Arguments to create a PurchaseParty.
     * @example
     * // Create one PurchaseParty
     * const PurchaseParty = await prisma.purchaseParty.create({
     *   data: {
     *     // ... data to create a PurchaseParty
     *   }
     * })
     * 
     */
    create<T extends PurchasePartyCreateArgs>(args: SelectSubset<T, PurchasePartyCreateArgs<ExtArgs>>): Prisma__PurchasePartyClient<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PurchaseParties.
     * @param {PurchasePartyCreateManyArgs} args - Arguments to create many PurchaseParties.
     * @example
     * // Create many PurchaseParties
     * const purchaseParty = await prisma.purchaseParty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PurchasePartyCreateManyArgs>(args?: SelectSubset<T, PurchasePartyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PurchaseParties and returns the data saved in the database.
     * @param {PurchasePartyCreateManyAndReturnArgs} args - Arguments to create many PurchaseParties.
     * @example
     * // Create many PurchaseParties
     * const purchaseParty = await prisma.purchaseParty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PurchaseParties and only return the `id`
     * const purchasePartyWithIdOnly = await prisma.purchaseParty.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PurchasePartyCreateManyAndReturnArgs>(args?: SelectSubset<T, PurchasePartyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PurchaseParty.
     * @param {PurchasePartyDeleteArgs} args - Arguments to delete one PurchaseParty.
     * @example
     * // Delete one PurchaseParty
     * const PurchaseParty = await prisma.purchaseParty.delete({
     *   where: {
     *     // ... filter to delete one PurchaseParty
     *   }
     * })
     * 
     */
    delete<T extends PurchasePartyDeleteArgs>(args: SelectSubset<T, PurchasePartyDeleteArgs<ExtArgs>>): Prisma__PurchasePartyClient<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PurchaseParty.
     * @param {PurchasePartyUpdateArgs} args - Arguments to update one PurchaseParty.
     * @example
     * // Update one PurchaseParty
     * const purchaseParty = await prisma.purchaseParty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PurchasePartyUpdateArgs>(args: SelectSubset<T, PurchasePartyUpdateArgs<ExtArgs>>): Prisma__PurchasePartyClient<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PurchaseParties.
     * @param {PurchasePartyDeleteManyArgs} args - Arguments to filter PurchaseParties to delete.
     * @example
     * // Delete a few PurchaseParties
     * const { count } = await prisma.purchaseParty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PurchasePartyDeleteManyArgs>(args?: SelectSubset<T, PurchasePartyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseParties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchasePartyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseParties
     * const purchaseParty = await prisma.purchaseParty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PurchasePartyUpdateManyArgs>(args: SelectSubset<T, PurchasePartyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PurchaseParty.
     * @param {PurchasePartyUpsertArgs} args - Arguments to update or create a PurchaseParty.
     * @example
     * // Update or create a PurchaseParty
     * const purchaseParty = await prisma.purchaseParty.upsert({
     *   create: {
     *     // ... data to create a PurchaseParty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseParty we want to update
     *   }
     * })
     */
    upsert<T extends PurchasePartyUpsertArgs>(args: SelectSubset<T, PurchasePartyUpsertArgs<ExtArgs>>): Prisma__PurchasePartyClient<$Result.GetResult<Prisma.$PurchasePartyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PurchaseParties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchasePartyCountArgs} args - Arguments to filter PurchaseParties to count.
     * @example
     * // Count the number of PurchaseParties
     * const count = await prisma.purchaseParty.count({
     *   where: {
     *     // ... the filter for the PurchaseParties we want to count
     *   }
     * })
    **/
    count<T extends PurchasePartyCountArgs>(
      args?: Subset<T, PurchasePartyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchasePartyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseParty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchasePartyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchasePartyAggregateArgs>(args: Subset<T, PurchasePartyAggregateArgs>): Prisma.PrismaPromise<GetPurchasePartyAggregateType<T>>

    /**
     * Group by PurchaseParty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchasePartyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchasePartyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchasePartyGroupByArgs['orderBy'] }
        : { orderBy?: PurchasePartyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchasePartyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchasePartyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PurchaseParty model
   */
  readonly fields: PurchasePartyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseParty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PurchasePartyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PurchaseParty model
   */ 
  interface PurchasePartyFieldRefs {
    readonly id: FieldRef<"PurchaseParty", 'String'>
    readonly partyName: FieldRef<"PurchaseParty", 'String'>
    readonly contactPerson: FieldRef<"PurchaseParty", 'String'>
    readonly phone: FieldRef<"PurchaseParty", 'String'>
    readonly email: FieldRef<"PurchaseParty", 'String'>
    readonly address: FieldRef<"PurchaseParty", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PurchaseParty findUnique
   */
  export type PurchasePartyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * Filter, which PurchaseParty to fetch.
     */
    where: PurchasePartyWhereUniqueInput
  }

  /**
   * PurchaseParty findUniqueOrThrow
   */
  export type PurchasePartyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * Filter, which PurchaseParty to fetch.
     */
    where: PurchasePartyWhereUniqueInput
  }

  /**
   * PurchaseParty findFirst
   */
  export type PurchasePartyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * Filter, which PurchaseParty to fetch.
     */
    where?: PurchasePartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseParties to fetch.
     */
    orderBy?: PurchasePartyOrderByWithRelationInput | PurchasePartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseParties.
     */
    cursor?: PurchasePartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseParties.
     */
    distinct?: PurchasePartyScalarFieldEnum | PurchasePartyScalarFieldEnum[]
  }

  /**
   * PurchaseParty findFirstOrThrow
   */
  export type PurchasePartyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * Filter, which PurchaseParty to fetch.
     */
    where?: PurchasePartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseParties to fetch.
     */
    orderBy?: PurchasePartyOrderByWithRelationInput | PurchasePartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseParties.
     */
    cursor?: PurchasePartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseParties.
     */
    distinct?: PurchasePartyScalarFieldEnum | PurchasePartyScalarFieldEnum[]
  }

  /**
   * PurchaseParty findMany
   */
  export type PurchasePartyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * Filter, which PurchaseParties to fetch.
     */
    where?: PurchasePartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseParties to fetch.
     */
    orderBy?: PurchasePartyOrderByWithRelationInput | PurchasePartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseParties.
     */
    cursor?: PurchasePartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseParties.
     */
    skip?: number
    distinct?: PurchasePartyScalarFieldEnum | PurchasePartyScalarFieldEnum[]
  }

  /**
   * PurchaseParty create
   */
  export type PurchasePartyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * The data needed to create a PurchaseParty.
     */
    data: XOR<PurchasePartyCreateInput, PurchasePartyUncheckedCreateInput>
  }

  /**
   * PurchaseParty createMany
   */
  export type PurchasePartyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseParties.
     */
    data: PurchasePartyCreateManyInput | PurchasePartyCreateManyInput[]
  }

  /**
   * PurchaseParty createManyAndReturn
   */
  export type PurchasePartyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PurchaseParties.
     */
    data: PurchasePartyCreateManyInput | PurchasePartyCreateManyInput[]
  }

  /**
   * PurchaseParty update
   */
  export type PurchasePartyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * The data needed to update a PurchaseParty.
     */
    data: XOR<PurchasePartyUpdateInput, PurchasePartyUncheckedUpdateInput>
    /**
     * Choose, which PurchaseParty to update.
     */
    where: PurchasePartyWhereUniqueInput
  }

  /**
   * PurchaseParty updateMany
   */
  export type PurchasePartyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseParties.
     */
    data: XOR<PurchasePartyUpdateManyMutationInput, PurchasePartyUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseParties to update
     */
    where?: PurchasePartyWhereInput
  }

  /**
   * PurchaseParty upsert
   */
  export type PurchasePartyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * The filter to search for the PurchaseParty to update in case it exists.
     */
    where: PurchasePartyWhereUniqueInput
    /**
     * In case the PurchaseParty found by the `where` argument doesn't exist, create a new PurchaseParty with this data.
     */
    create: XOR<PurchasePartyCreateInput, PurchasePartyUncheckedCreateInput>
    /**
     * In case the PurchaseParty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchasePartyUpdateInput, PurchasePartyUncheckedUpdateInput>
  }

  /**
   * PurchaseParty delete
   */
  export type PurchasePartyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
    /**
     * Filter which PurchaseParty to delete.
     */
    where: PurchasePartyWhereUniqueInput
  }

  /**
   * PurchaseParty deleteMany
   */
  export type PurchasePartyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseParties to delete
     */
    where?: PurchasePartyWhereInput
  }

  /**
   * PurchaseParty without action
   */
  export type PurchasePartyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseParty
     */
    select?: PurchasePartySelect<ExtArgs> | null
  }


  /**
   * Model Inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    quantity: number | null
    rate: number | null
  }

  export type InventorySumAggregateOutputType = {
    quantity: number | null
    rate: number | null
  }

  export type InventoryMinAggregateOutputType = {
    id: string | null
    productCode: string | null
    grade: string | null
    company: string | null
    specificGrade: string | null
    quantity: number | null
    rate: number | null
    purchaseParty: string | null
    dateAdded: string | null
    createdAt: Date | null
  }

  export type InventoryMaxAggregateOutputType = {
    id: string | null
    productCode: string | null
    grade: string | null
    company: string | null
    specificGrade: string | null
    quantity: number | null
    rate: number | null
    purchaseParty: string | null
    dateAdded: string | null
    createdAt: Date | null
  }

  export type InventoryCountAggregateOutputType = {
    id: number
    productCode: number
    grade: number
    company: number
    specificGrade: number
    quantity: number
    rate: number
    purchaseParty: number
    dateAdded: number
    createdAt: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    quantity?: true
    rate?: true
  }

  export type InventorySumAggregateInputType = {
    quantity?: true
    rate?: true
  }

  export type InventoryMinAggregateInputType = {
    id?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    quantity?: true
    rate?: true
    purchaseParty?: true
    dateAdded?: true
    createdAt?: true
  }

  export type InventoryMaxAggregateInputType = {
    id?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    quantity?: true
    rate?: true
    purchaseParty?: true
    dateAdded?: true
    createdAt?: true
  }

  export type InventoryCountAggregateInputType = {
    id?: true
    productCode?: true
    grade?: true
    company?: true
    specificGrade?: true
    quantity?: true
    rate?: true
    purchaseParty?: true
    dateAdded?: true
    createdAt?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventory to aggregate.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type InventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithAggregationInput | InventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: InventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    id: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    quantity: number
    rate: number
    purchaseParty: string
    dateAdded: string
    createdAt: Date
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type InventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    quantity?: boolean
    rate?: boolean
    purchaseParty?: boolean
    dateAdded?: boolean
    createdAt?: boolean
    dealSources?: boolean | Inventory$dealSourcesArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    quantity?: boolean
    rate?: boolean
    purchaseParty?: boolean
    dateAdded?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectScalar = {
    id?: boolean
    productCode?: boolean
    grade?: boolean
    company?: boolean
    specificGrade?: boolean
    quantity?: boolean
    rate?: boolean
    purchaseParty?: boolean
    dateAdded?: boolean
    createdAt?: boolean
  }

  export type InventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dealSources?: boolean | Inventory$dealSourcesArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $InventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inventory"
    objects: {
      dealSources: Prisma.$DealSourcePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productCode: string
      grade: string
      company: string
      specificGrade: string
      quantity: number
      rate: number
      purchaseParty: string
      dateAdded: string
      createdAt: Date
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }

  type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = $Result.GetResult<Prisma.$InventoryPayload, S>

  type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface InventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryFindUniqueArgs>(args: SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Inventory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryFindFirstArgs>(args?: SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryWithIdOnly = await prisma.inventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryFindManyArgs>(args?: SelectSubset<T, InventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Inventory.
     * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
     */
    create<T extends InventoryCreateArgs>(args: SelectSubset<T, InventoryCreateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Inventories.
     * @param {InventoryCreateManyArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCreateManyArgs>(args?: SelectSubset<T, InventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inventories and returns the data saved in the database.
     * @param {InventoryCreateManyAndReturnArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inventories and only return the `id`
     * const inventoryWithIdOnly = await prisma.inventory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Inventory.
     * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
     */
    delete<T extends InventoryDeleteArgs>(args: SelectSubset<T, InventoryDeleteArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Inventory.
     * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUpdateArgs>(args: SelectSubset<T, InventoryUpdateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Inventories.
     * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryDeleteManyArgs>(args?: SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUpdateManyArgs>(args: SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inventory.
     * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUpsertArgs>(args: SelectSubset<T, InventoryUpsertArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountArgs>(
      args?: Subset<T, InventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryGroupByArgs['orderBy'] }
        : { orderBy?: InventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inventory model
   */
  readonly fields: InventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dealSources<T extends Inventory$dealSourcesArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$dealSourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DealSourcePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inventory model
   */ 
  interface InventoryFieldRefs {
    readonly id: FieldRef<"Inventory", 'String'>
    readonly productCode: FieldRef<"Inventory", 'String'>
    readonly grade: FieldRef<"Inventory", 'String'>
    readonly company: FieldRef<"Inventory", 'String'>
    readonly specificGrade: FieldRef<"Inventory", 'String'>
    readonly quantity: FieldRef<"Inventory", 'Float'>
    readonly rate: FieldRef<"Inventory", 'Float'>
    readonly purchaseParty: FieldRef<"Inventory", 'String'>
    readonly dateAdded: FieldRef<"Inventory", 'String'>
    readonly createdAt: FieldRef<"Inventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Inventory findUnique
   */
  export type InventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findUniqueOrThrow
   */
  export type InventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findFirst
   */
  export type InventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findFirstOrThrow
   */
  export type InventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findMany
   */
  export type InventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventories to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory create
   */
  export type InventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inventory.
     */
    data: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
  }

  /**
   * Inventory createMany
   */
  export type InventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
  }

  /**
   * Inventory createManyAndReturn
   */
  export type InventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
  }

  /**
   * Inventory update
   */
  export type InventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inventory.
     */
    data: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
    /**
     * Choose, which Inventory to update.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory updateMany
   */
  export type InventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
  }

  /**
   * Inventory upsert
   */
  export type InventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inventory to update in case it exists.
     */
    where: InventoryWhereUniqueInput
    /**
     * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
     */
    create: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
    /**
     * In case the Inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
  }

  /**
   * Inventory delete
   */
  export type InventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter which Inventory to delete.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory deleteMany
   */
  export type InventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventories to delete
     */
    where?: InventoryWhereInput
  }

  /**
   * Inventory.dealSources
   */
  export type Inventory$dealSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealSource
     */
    select?: DealSourceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DealSourceInclude<ExtArgs> | null
    where?: DealSourceWhereInput
    orderBy?: DealSourceOrderByWithRelationInput | DealSourceOrderByWithRelationInput[]
    cursor?: DealSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DealSourceScalarFieldEnum | DealSourceScalarFieldEnum[]
  }

  /**
   * Inventory without action
   */
  export type InventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DealScalarFieldEnum: {
    id: 'id',
    date: 'date',
    saleParty: 'saleParty',
    quantitySold: 'quantitySold',
    saleRate: 'saleRate',
    deliveryTerms: 'deliveryTerms',
    productCode: 'productCode',
    grade: 'grade',
    company: 'company',
    specificGrade: 'specificGrade',
    saleSource: 'saleSource',
    purchaseParty: 'purchaseParty',
    purchaseQuantity: 'purchaseQuantity',
    purchaseRate: 'purchaseRate',
    saleComments: 'saleComments',
    purchaseComments: 'purchaseComments',
    finalComments: 'finalComments',
    warehouse: 'warehouse',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DealScalarFieldEnum = (typeof DealScalarFieldEnum)[keyof typeof DealScalarFieldEnum]


  export const DealSourceScalarFieldEnum: {
    id: 'id',
    dealId: 'dealId',
    inventoryId: 'inventoryId',
    quantityUsed: 'quantityUsed',
    costPerKg: 'costPerKg',
    supplierName: 'supplierName',
    selectionOrder: 'selectionOrder',
    createdAt: 'createdAt'
  };

  export type DealSourceScalarFieldEnum = (typeof DealSourceScalarFieldEnum)[keyof typeof DealSourceScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    productCode: 'productCode',
    grade: 'grade',
    company: 'company',
    specificGrade: 'specificGrade',
    source: 'source'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const SalePartyScalarFieldEnum: {
    id: 'id',
    partyName: 'partyName',
    contactPerson: 'contactPerson',
    phone: 'phone',
    email: 'email',
    address: 'address'
  };

  export type SalePartyScalarFieldEnum = (typeof SalePartyScalarFieldEnum)[keyof typeof SalePartyScalarFieldEnum]


  export const PurchasePartyScalarFieldEnum: {
    id: 'id',
    partyName: 'partyName',
    contactPerson: 'contactPerson',
    phone: 'phone',
    email: 'email',
    address: 'address'
  };

  export type PurchasePartyScalarFieldEnum = (typeof PurchasePartyScalarFieldEnum)[keyof typeof PurchasePartyScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    id: 'id',
    productCode: 'productCode',
    grade: 'grade',
    company: 'company',
    specificGrade: 'specificGrade',
    quantity: 'quantity',
    rate: 'rate',
    purchaseParty: 'purchaseParty',
    dateAdded: 'dateAdded',
    createdAt: 'createdAt'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type DealWhereInput = {
    AND?: DealWhereInput | DealWhereInput[]
    OR?: DealWhereInput[]
    NOT?: DealWhereInput | DealWhereInput[]
    id?: StringFilter<"Deal"> | string
    date?: StringFilter<"Deal"> | string
    saleParty?: StringFilter<"Deal"> | string
    quantitySold?: FloatFilter<"Deal"> | number
    saleRate?: FloatFilter<"Deal"> | number
    deliveryTerms?: StringFilter<"Deal"> | string
    productCode?: StringFilter<"Deal"> | string
    grade?: StringFilter<"Deal"> | string
    company?: StringFilter<"Deal"> | string
    specificGrade?: StringFilter<"Deal"> | string
    saleSource?: StringFilter<"Deal"> | string
    purchaseParty?: StringFilter<"Deal"> | string
    purchaseQuantity?: FloatFilter<"Deal"> | number
    purchaseRate?: FloatFilter<"Deal"> | number
    saleComments?: StringNullableFilter<"Deal"> | string | null
    purchaseComments?: StringNullableFilter<"Deal"> | string | null
    finalComments?: StringNullableFilter<"Deal"> | string | null
    warehouse?: StringNullableFilter<"Deal"> | string | null
    createdAt?: DateTimeFilter<"Deal"> | Date | string
    updatedAt?: DateTimeFilter<"Deal"> | Date | string
    sources?: DealSourceListRelationFilter
  }

  export type DealOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    saleParty?: SortOrder
    quantitySold?: SortOrder
    saleRate?: SortOrder
    deliveryTerms?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    saleSource?: SortOrder
    purchaseParty?: SortOrder
    purchaseQuantity?: SortOrder
    purchaseRate?: SortOrder
    saleComments?: SortOrderInput | SortOrder
    purchaseComments?: SortOrderInput | SortOrder
    finalComments?: SortOrderInput | SortOrder
    warehouse?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sources?: DealSourceOrderByRelationAggregateInput
  }

  export type DealWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DealWhereInput | DealWhereInput[]
    OR?: DealWhereInput[]
    NOT?: DealWhereInput | DealWhereInput[]
    date?: StringFilter<"Deal"> | string
    saleParty?: StringFilter<"Deal"> | string
    quantitySold?: FloatFilter<"Deal"> | number
    saleRate?: FloatFilter<"Deal"> | number
    deliveryTerms?: StringFilter<"Deal"> | string
    productCode?: StringFilter<"Deal"> | string
    grade?: StringFilter<"Deal"> | string
    company?: StringFilter<"Deal"> | string
    specificGrade?: StringFilter<"Deal"> | string
    saleSource?: StringFilter<"Deal"> | string
    purchaseParty?: StringFilter<"Deal"> | string
    purchaseQuantity?: FloatFilter<"Deal"> | number
    purchaseRate?: FloatFilter<"Deal"> | number
    saleComments?: StringNullableFilter<"Deal"> | string | null
    purchaseComments?: StringNullableFilter<"Deal"> | string | null
    finalComments?: StringNullableFilter<"Deal"> | string | null
    warehouse?: StringNullableFilter<"Deal"> | string | null
    createdAt?: DateTimeFilter<"Deal"> | Date | string
    updatedAt?: DateTimeFilter<"Deal"> | Date | string
    sources?: DealSourceListRelationFilter
  }, "id">

  export type DealOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    saleParty?: SortOrder
    quantitySold?: SortOrder
    saleRate?: SortOrder
    deliveryTerms?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    saleSource?: SortOrder
    purchaseParty?: SortOrder
    purchaseQuantity?: SortOrder
    purchaseRate?: SortOrder
    saleComments?: SortOrderInput | SortOrder
    purchaseComments?: SortOrderInput | SortOrder
    finalComments?: SortOrderInput | SortOrder
    warehouse?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DealCountOrderByAggregateInput
    _avg?: DealAvgOrderByAggregateInput
    _max?: DealMaxOrderByAggregateInput
    _min?: DealMinOrderByAggregateInput
    _sum?: DealSumOrderByAggregateInput
  }

  export type DealScalarWhereWithAggregatesInput = {
    AND?: DealScalarWhereWithAggregatesInput | DealScalarWhereWithAggregatesInput[]
    OR?: DealScalarWhereWithAggregatesInput[]
    NOT?: DealScalarWhereWithAggregatesInput | DealScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Deal"> | string
    date?: StringWithAggregatesFilter<"Deal"> | string
    saleParty?: StringWithAggregatesFilter<"Deal"> | string
    quantitySold?: FloatWithAggregatesFilter<"Deal"> | number
    saleRate?: FloatWithAggregatesFilter<"Deal"> | number
    deliveryTerms?: StringWithAggregatesFilter<"Deal"> | string
    productCode?: StringWithAggregatesFilter<"Deal"> | string
    grade?: StringWithAggregatesFilter<"Deal"> | string
    company?: StringWithAggregatesFilter<"Deal"> | string
    specificGrade?: StringWithAggregatesFilter<"Deal"> | string
    saleSource?: StringWithAggregatesFilter<"Deal"> | string
    purchaseParty?: StringWithAggregatesFilter<"Deal"> | string
    purchaseQuantity?: FloatWithAggregatesFilter<"Deal"> | number
    purchaseRate?: FloatWithAggregatesFilter<"Deal"> | number
    saleComments?: StringNullableWithAggregatesFilter<"Deal"> | string | null
    purchaseComments?: StringNullableWithAggregatesFilter<"Deal"> | string | null
    finalComments?: StringNullableWithAggregatesFilter<"Deal"> | string | null
    warehouse?: StringNullableWithAggregatesFilter<"Deal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Deal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Deal"> | Date | string
  }

  export type DealSourceWhereInput = {
    AND?: DealSourceWhereInput | DealSourceWhereInput[]
    OR?: DealSourceWhereInput[]
    NOT?: DealSourceWhereInput | DealSourceWhereInput[]
    id?: StringFilter<"DealSource"> | string
    dealId?: StringFilter<"DealSource"> | string
    inventoryId?: StringFilter<"DealSource"> | string
    quantityUsed?: FloatFilter<"DealSource"> | number
    costPerKg?: FloatFilter<"DealSource"> | number
    supplierName?: StringFilter<"DealSource"> | string
    selectionOrder?: IntFilter<"DealSource"> | number
    createdAt?: DateTimeFilter<"DealSource"> | Date | string
    deal?: XOR<DealRelationFilter, DealWhereInput>
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
  }

  export type DealSourceOrderByWithRelationInput = {
    id?: SortOrder
    dealId?: SortOrder
    inventoryId?: SortOrder
    quantityUsed?: SortOrder
    costPerKg?: SortOrder
    supplierName?: SortOrder
    selectionOrder?: SortOrder
    createdAt?: SortOrder
    deal?: DealOrderByWithRelationInput
    inventory?: InventoryOrderByWithRelationInput
  }

  export type DealSourceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DealSourceWhereInput | DealSourceWhereInput[]
    OR?: DealSourceWhereInput[]
    NOT?: DealSourceWhereInput | DealSourceWhereInput[]
    dealId?: StringFilter<"DealSource"> | string
    inventoryId?: StringFilter<"DealSource"> | string
    quantityUsed?: FloatFilter<"DealSource"> | number
    costPerKg?: FloatFilter<"DealSource"> | number
    supplierName?: StringFilter<"DealSource"> | string
    selectionOrder?: IntFilter<"DealSource"> | number
    createdAt?: DateTimeFilter<"DealSource"> | Date | string
    deal?: XOR<DealRelationFilter, DealWhereInput>
    inventory?: XOR<InventoryRelationFilter, InventoryWhereInput>
  }, "id">

  export type DealSourceOrderByWithAggregationInput = {
    id?: SortOrder
    dealId?: SortOrder
    inventoryId?: SortOrder
    quantityUsed?: SortOrder
    costPerKg?: SortOrder
    supplierName?: SortOrder
    selectionOrder?: SortOrder
    createdAt?: SortOrder
    _count?: DealSourceCountOrderByAggregateInput
    _avg?: DealSourceAvgOrderByAggregateInput
    _max?: DealSourceMaxOrderByAggregateInput
    _min?: DealSourceMinOrderByAggregateInput
    _sum?: DealSourceSumOrderByAggregateInput
  }

  export type DealSourceScalarWhereWithAggregatesInput = {
    AND?: DealSourceScalarWhereWithAggregatesInput | DealSourceScalarWhereWithAggregatesInput[]
    OR?: DealSourceScalarWhereWithAggregatesInput[]
    NOT?: DealSourceScalarWhereWithAggregatesInput | DealSourceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DealSource"> | string
    dealId?: StringWithAggregatesFilter<"DealSource"> | string
    inventoryId?: StringWithAggregatesFilter<"DealSource"> | string
    quantityUsed?: FloatWithAggregatesFilter<"DealSource"> | number
    costPerKg?: FloatWithAggregatesFilter<"DealSource"> | number
    supplierName?: StringWithAggregatesFilter<"DealSource"> | string
    selectionOrder?: IntWithAggregatesFilter<"DealSource"> | number
    createdAt?: DateTimeWithAggregatesFilter<"DealSource"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    productCode?: StringFilter<"Product"> | string
    grade?: StringFilter<"Product"> | string
    company?: StringFilter<"Product"> | string
    specificGrade?: StringFilter<"Product"> | string
    source?: StringFilter<"Product"> | string
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    source?: SortOrder
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productCode?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    grade?: StringFilter<"Product"> | string
    company?: StringFilter<"Product"> | string
    specificGrade?: StringFilter<"Product"> | string
    source?: StringFilter<"Product"> | string
  }, "id" | "productCode">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    source?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    productCode?: StringWithAggregatesFilter<"Product"> | string
    grade?: StringWithAggregatesFilter<"Product"> | string
    company?: StringWithAggregatesFilter<"Product"> | string
    specificGrade?: StringWithAggregatesFilter<"Product"> | string
    source?: StringWithAggregatesFilter<"Product"> | string
  }

  export type SalePartyWhereInput = {
    AND?: SalePartyWhereInput | SalePartyWhereInput[]
    OR?: SalePartyWhereInput[]
    NOT?: SalePartyWhereInput | SalePartyWhereInput[]
    id?: StringFilter<"SaleParty"> | string
    partyName?: StringFilter<"SaleParty"> | string
    contactPerson?: StringNullableFilter<"SaleParty"> | string | null
    phone?: StringNullableFilter<"SaleParty"> | string | null
    email?: StringNullableFilter<"SaleParty"> | string | null
    address?: StringNullableFilter<"SaleParty"> | string | null
  }

  export type SalePartyOrderByWithRelationInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
  }

  export type SalePartyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    partyName?: string
    AND?: SalePartyWhereInput | SalePartyWhereInput[]
    OR?: SalePartyWhereInput[]
    NOT?: SalePartyWhereInput | SalePartyWhereInput[]
    contactPerson?: StringNullableFilter<"SaleParty"> | string | null
    phone?: StringNullableFilter<"SaleParty"> | string | null
    email?: StringNullableFilter<"SaleParty"> | string | null
    address?: StringNullableFilter<"SaleParty"> | string | null
  }, "id" | "partyName">

  export type SalePartyOrderByWithAggregationInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    _count?: SalePartyCountOrderByAggregateInput
    _max?: SalePartyMaxOrderByAggregateInput
    _min?: SalePartyMinOrderByAggregateInput
  }

  export type SalePartyScalarWhereWithAggregatesInput = {
    AND?: SalePartyScalarWhereWithAggregatesInput | SalePartyScalarWhereWithAggregatesInput[]
    OR?: SalePartyScalarWhereWithAggregatesInput[]
    NOT?: SalePartyScalarWhereWithAggregatesInput | SalePartyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SaleParty"> | string
    partyName?: StringWithAggregatesFilter<"SaleParty"> | string
    contactPerson?: StringNullableWithAggregatesFilter<"SaleParty"> | string | null
    phone?: StringNullableWithAggregatesFilter<"SaleParty"> | string | null
    email?: StringNullableWithAggregatesFilter<"SaleParty"> | string | null
    address?: StringNullableWithAggregatesFilter<"SaleParty"> | string | null
  }

  export type PurchasePartyWhereInput = {
    AND?: PurchasePartyWhereInput | PurchasePartyWhereInput[]
    OR?: PurchasePartyWhereInput[]
    NOT?: PurchasePartyWhereInput | PurchasePartyWhereInput[]
    id?: StringFilter<"PurchaseParty"> | string
    partyName?: StringFilter<"PurchaseParty"> | string
    contactPerson?: StringNullableFilter<"PurchaseParty"> | string | null
    phone?: StringNullableFilter<"PurchaseParty"> | string | null
    email?: StringNullableFilter<"PurchaseParty"> | string | null
    address?: StringNullableFilter<"PurchaseParty"> | string | null
  }

  export type PurchasePartyOrderByWithRelationInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
  }

  export type PurchasePartyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    partyName?: string
    AND?: PurchasePartyWhereInput | PurchasePartyWhereInput[]
    OR?: PurchasePartyWhereInput[]
    NOT?: PurchasePartyWhereInput | PurchasePartyWhereInput[]
    contactPerson?: StringNullableFilter<"PurchaseParty"> | string | null
    phone?: StringNullableFilter<"PurchaseParty"> | string | null
    email?: StringNullableFilter<"PurchaseParty"> | string | null
    address?: StringNullableFilter<"PurchaseParty"> | string | null
  }, "id" | "partyName">

  export type PurchasePartyOrderByWithAggregationInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    _count?: PurchasePartyCountOrderByAggregateInput
    _max?: PurchasePartyMaxOrderByAggregateInput
    _min?: PurchasePartyMinOrderByAggregateInput
  }

  export type PurchasePartyScalarWhereWithAggregatesInput = {
    AND?: PurchasePartyScalarWhereWithAggregatesInput | PurchasePartyScalarWhereWithAggregatesInput[]
    OR?: PurchasePartyScalarWhereWithAggregatesInput[]
    NOT?: PurchasePartyScalarWhereWithAggregatesInput | PurchasePartyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PurchaseParty"> | string
    partyName?: StringWithAggregatesFilter<"PurchaseParty"> | string
    contactPerson?: StringNullableWithAggregatesFilter<"PurchaseParty"> | string | null
    phone?: StringNullableWithAggregatesFilter<"PurchaseParty"> | string | null
    email?: StringNullableWithAggregatesFilter<"PurchaseParty"> | string | null
    address?: StringNullableWithAggregatesFilter<"PurchaseParty"> | string | null
  }

  export type InventoryWhereInput = {
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    id?: StringFilter<"Inventory"> | string
    productCode?: StringFilter<"Inventory"> | string
    grade?: StringFilter<"Inventory"> | string
    company?: StringFilter<"Inventory"> | string
    specificGrade?: StringFilter<"Inventory"> | string
    quantity?: FloatFilter<"Inventory"> | number
    rate?: FloatFilter<"Inventory"> | number
    purchaseParty?: StringFilter<"Inventory"> | string
    dateAdded?: StringFilter<"Inventory"> | string
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    dealSources?: DealSourceListRelationFilter
  }

  export type InventoryOrderByWithRelationInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    purchaseParty?: SortOrder
    dateAdded?: SortOrder
    createdAt?: SortOrder
    dealSources?: DealSourceOrderByRelationAggregateInput
  }

  export type InventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    productCode?: StringFilter<"Inventory"> | string
    grade?: StringFilter<"Inventory"> | string
    company?: StringFilter<"Inventory"> | string
    specificGrade?: StringFilter<"Inventory"> | string
    quantity?: FloatFilter<"Inventory"> | number
    rate?: FloatFilter<"Inventory"> | number
    purchaseParty?: StringFilter<"Inventory"> | string
    dateAdded?: StringFilter<"Inventory"> | string
    createdAt?: DateTimeFilter<"Inventory"> | Date | string
    dealSources?: DealSourceListRelationFilter
  }, "id">

  export type InventoryOrderByWithAggregationInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    purchaseParty?: SortOrder
    dateAdded?: SortOrder
    createdAt?: SortOrder
    _count?: InventoryCountOrderByAggregateInput
    _avg?: InventoryAvgOrderByAggregateInput
    _max?: InventoryMaxOrderByAggregateInput
    _min?: InventoryMinOrderByAggregateInput
    _sum?: InventorySumOrderByAggregateInput
  }

  export type InventoryScalarWhereWithAggregatesInput = {
    AND?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    OR?: InventoryScalarWhereWithAggregatesInput[]
    NOT?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Inventory"> | string
    productCode?: StringWithAggregatesFilter<"Inventory"> | string
    grade?: StringWithAggregatesFilter<"Inventory"> | string
    company?: StringWithAggregatesFilter<"Inventory"> | string
    specificGrade?: StringWithAggregatesFilter<"Inventory"> | string
    quantity?: FloatWithAggregatesFilter<"Inventory"> | number
    rate?: FloatWithAggregatesFilter<"Inventory"> | number
    purchaseParty?: StringWithAggregatesFilter<"Inventory"> | string
    dateAdded?: StringWithAggregatesFilter<"Inventory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Inventory"> | Date | string
  }

  export type DealCreateInput = {
    id?: string
    date: string
    saleParty: string
    quantitySold: number
    saleRate: number
    deliveryTerms: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    saleSource: string
    purchaseParty: string
    purchaseQuantity: number
    purchaseRate: number
    saleComments?: string | null
    purchaseComments?: string | null
    finalComments?: string | null
    warehouse?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sources?: DealSourceCreateNestedManyWithoutDealInput
  }

  export type DealUncheckedCreateInput = {
    id?: string
    date: string
    saleParty: string
    quantitySold: number
    saleRate: number
    deliveryTerms: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    saleSource: string
    purchaseParty: string
    purchaseQuantity: number
    purchaseRate: number
    saleComments?: string | null
    purchaseComments?: string | null
    finalComments?: string | null
    warehouse?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sources?: DealSourceUncheckedCreateNestedManyWithoutDealInput
  }

  export type DealUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    saleParty?: StringFieldUpdateOperationsInput | string
    quantitySold?: FloatFieldUpdateOperationsInput | number
    saleRate?: FloatFieldUpdateOperationsInput | number
    deliveryTerms?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    saleSource?: StringFieldUpdateOperationsInput | string
    purchaseParty?: StringFieldUpdateOperationsInput | string
    purchaseQuantity?: FloatFieldUpdateOperationsInput | number
    purchaseRate?: FloatFieldUpdateOperationsInput | number
    saleComments?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseComments?: NullableStringFieldUpdateOperationsInput | string | null
    finalComments?: NullableStringFieldUpdateOperationsInput | string | null
    warehouse?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sources?: DealSourceUpdateManyWithoutDealNestedInput
  }

  export type DealUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    saleParty?: StringFieldUpdateOperationsInput | string
    quantitySold?: FloatFieldUpdateOperationsInput | number
    saleRate?: FloatFieldUpdateOperationsInput | number
    deliveryTerms?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    saleSource?: StringFieldUpdateOperationsInput | string
    purchaseParty?: StringFieldUpdateOperationsInput | string
    purchaseQuantity?: FloatFieldUpdateOperationsInput | number
    purchaseRate?: FloatFieldUpdateOperationsInput | number
    saleComments?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseComments?: NullableStringFieldUpdateOperationsInput | string | null
    finalComments?: NullableStringFieldUpdateOperationsInput | string | null
    warehouse?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sources?: DealSourceUncheckedUpdateManyWithoutDealNestedInput
  }

  export type DealCreateManyInput = {
    id?: string
    date: string
    saleParty: string
    quantitySold: number
    saleRate: number
    deliveryTerms: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    saleSource: string
    purchaseParty: string
    purchaseQuantity: number
    purchaseRate: number
    saleComments?: string | null
    purchaseComments?: string | null
    finalComments?: string | null
    warehouse?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DealUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    saleParty?: StringFieldUpdateOperationsInput | string
    quantitySold?: FloatFieldUpdateOperationsInput | number
    saleRate?: FloatFieldUpdateOperationsInput | number
    deliveryTerms?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    saleSource?: StringFieldUpdateOperationsInput | string
    purchaseParty?: StringFieldUpdateOperationsInput | string
    purchaseQuantity?: FloatFieldUpdateOperationsInput | number
    purchaseRate?: FloatFieldUpdateOperationsInput | number
    saleComments?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseComments?: NullableStringFieldUpdateOperationsInput | string | null
    finalComments?: NullableStringFieldUpdateOperationsInput | string | null
    warehouse?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    saleParty?: StringFieldUpdateOperationsInput | string
    quantitySold?: FloatFieldUpdateOperationsInput | number
    saleRate?: FloatFieldUpdateOperationsInput | number
    deliveryTerms?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    saleSource?: StringFieldUpdateOperationsInput | string
    purchaseParty?: StringFieldUpdateOperationsInput | string
    purchaseQuantity?: FloatFieldUpdateOperationsInput | number
    purchaseRate?: FloatFieldUpdateOperationsInput | number
    saleComments?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseComments?: NullableStringFieldUpdateOperationsInput | string | null
    finalComments?: NullableStringFieldUpdateOperationsInput | string | null
    warehouse?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealSourceCreateInput = {
    id?: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
    deal: DealCreateNestedOneWithoutSourcesInput
    inventory: InventoryCreateNestedOneWithoutDealSourcesInput
  }

  export type DealSourceUncheckedCreateInput = {
    id?: string
    dealId: string
    inventoryId: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
  }

  export type DealSourceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deal?: DealUpdateOneRequiredWithoutSourcesNestedInput
    inventory?: InventoryUpdateOneRequiredWithoutDealSourcesNestedInput
  }

  export type DealSourceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dealId?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealSourceCreateManyInput = {
    id?: string
    dealId: string
    inventoryId: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
  }

  export type DealSourceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealSourceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dealId?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    source?: string
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    source?: string
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateManyInput = {
    id?: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    source?: string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type SalePartyCreateInput = {
    id?: string
    partyName: string
    contactPerson?: string | null
    phone?: string | null
    email?: string | null
    address?: string | null
  }

  export type SalePartyUncheckedCreateInput = {
    id?: string
    partyName: string
    contactPerson?: string | null
    phone?: string | null
    email?: string | null
    address?: string | null
  }

  export type SalePartyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyName?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SalePartyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyName?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SalePartyCreateManyInput = {
    id?: string
    partyName: string
    contactPerson?: string | null
    phone?: string | null
    email?: string | null
    address?: string | null
  }

  export type SalePartyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyName?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SalePartyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyName?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PurchasePartyCreateInput = {
    id?: string
    partyName: string
    contactPerson?: string | null
    phone?: string | null
    email?: string | null
    address?: string | null
  }

  export type PurchasePartyUncheckedCreateInput = {
    id?: string
    partyName: string
    contactPerson?: string | null
    phone?: string | null
    email?: string | null
    address?: string | null
  }

  export type PurchasePartyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyName?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PurchasePartyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyName?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PurchasePartyCreateManyInput = {
    id?: string
    partyName: string
    contactPerson?: string | null
    phone?: string | null
    email?: string | null
    address?: string | null
  }

  export type PurchasePartyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyName?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PurchasePartyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    partyName?: StringFieldUpdateOperationsInput | string
    contactPerson?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InventoryCreateInput = {
    id?: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    quantity: number
    rate: number
    purchaseParty: string
    dateAdded: string
    createdAt?: Date | string
    dealSources?: DealSourceCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateInput = {
    id?: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    quantity: number
    rate: number
    purchaseParty: string
    dateAdded: string
    createdAt?: Date | string
    dealSources?: DealSourceUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    purchaseParty?: StringFieldUpdateOperationsInput | string
    dateAdded?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dealSources?: DealSourceUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    purchaseParty?: StringFieldUpdateOperationsInput | string
    dateAdded?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dealSources?: DealSourceUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryCreateManyInput = {
    id?: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    quantity: number
    rate: number
    purchaseParty: string
    dateAdded: string
    createdAt?: Date | string
  }

  export type InventoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    purchaseParty?: StringFieldUpdateOperationsInput | string
    dateAdded?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    purchaseParty?: StringFieldUpdateOperationsInput | string
    dateAdded?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DealSourceListRelationFilter = {
    every?: DealSourceWhereInput
    some?: DealSourceWhereInput
    none?: DealSourceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DealSourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DealCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    saleParty?: SortOrder
    quantitySold?: SortOrder
    saleRate?: SortOrder
    deliveryTerms?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    saleSource?: SortOrder
    purchaseParty?: SortOrder
    purchaseQuantity?: SortOrder
    purchaseRate?: SortOrder
    saleComments?: SortOrder
    purchaseComments?: SortOrder
    finalComments?: SortOrder
    warehouse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DealAvgOrderByAggregateInput = {
    quantitySold?: SortOrder
    saleRate?: SortOrder
    purchaseQuantity?: SortOrder
    purchaseRate?: SortOrder
  }

  export type DealMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    saleParty?: SortOrder
    quantitySold?: SortOrder
    saleRate?: SortOrder
    deliveryTerms?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    saleSource?: SortOrder
    purchaseParty?: SortOrder
    purchaseQuantity?: SortOrder
    purchaseRate?: SortOrder
    saleComments?: SortOrder
    purchaseComments?: SortOrder
    finalComments?: SortOrder
    warehouse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DealMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    saleParty?: SortOrder
    quantitySold?: SortOrder
    saleRate?: SortOrder
    deliveryTerms?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    saleSource?: SortOrder
    purchaseParty?: SortOrder
    purchaseQuantity?: SortOrder
    purchaseRate?: SortOrder
    saleComments?: SortOrder
    purchaseComments?: SortOrder
    finalComments?: SortOrder
    warehouse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DealSumOrderByAggregateInput = {
    quantitySold?: SortOrder
    saleRate?: SortOrder
    purchaseQuantity?: SortOrder
    purchaseRate?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DealRelationFilter = {
    is?: DealWhereInput
    isNot?: DealWhereInput
  }

  export type InventoryRelationFilter = {
    is?: InventoryWhereInput
    isNot?: InventoryWhereInput
  }

  export type DealSourceCountOrderByAggregateInput = {
    id?: SortOrder
    dealId?: SortOrder
    inventoryId?: SortOrder
    quantityUsed?: SortOrder
    costPerKg?: SortOrder
    supplierName?: SortOrder
    selectionOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type DealSourceAvgOrderByAggregateInput = {
    quantityUsed?: SortOrder
    costPerKg?: SortOrder
    selectionOrder?: SortOrder
  }

  export type DealSourceMaxOrderByAggregateInput = {
    id?: SortOrder
    dealId?: SortOrder
    inventoryId?: SortOrder
    quantityUsed?: SortOrder
    costPerKg?: SortOrder
    supplierName?: SortOrder
    selectionOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type DealSourceMinOrderByAggregateInput = {
    id?: SortOrder
    dealId?: SortOrder
    inventoryId?: SortOrder
    quantityUsed?: SortOrder
    costPerKg?: SortOrder
    supplierName?: SortOrder
    selectionOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type DealSourceSumOrderByAggregateInput = {
    quantityUsed?: SortOrder
    costPerKg?: SortOrder
    selectionOrder?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    source?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    source?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    source?: SortOrder
  }

  export type SalePartyCountOrderByAggregateInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type SalePartyMaxOrderByAggregateInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type SalePartyMinOrderByAggregateInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type PurchasePartyCountOrderByAggregateInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type PurchasePartyMaxOrderByAggregateInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type PurchasePartyMinOrderByAggregateInput = {
    id?: SortOrder
    partyName?: SortOrder
    contactPerson?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
  }

  export type InventoryCountOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    purchaseParty?: SortOrder
    dateAdded?: SortOrder
    createdAt?: SortOrder
  }

  export type InventoryAvgOrderByAggregateInput = {
    quantity?: SortOrder
    rate?: SortOrder
  }

  export type InventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    purchaseParty?: SortOrder
    dateAdded?: SortOrder
    createdAt?: SortOrder
  }

  export type InventoryMinOrderByAggregateInput = {
    id?: SortOrder
    productCode?: SortOrder
    grade?: SortOrder
    company?: SortOrder
    specificGrade?: SortOrder
    quantity?: SortOrder
    rate?: SortOrder
    purchaseParty?: SortOrder
    dateAdded?: SortOrder
    createdAt?: SortOrder
  }

  export type InventorySumOrderByAggregateInput = {
    quantity?: SortOrder
    rate?: SortOrder
  }

  export type DealSourceCreateNestedManyWithoutDealInput = {
    create?: XOR<DealSourceCreateWithoutDealInput, DealSourceUncheckedCreateWithoutDealInput> | DealSourceCreateWithoutDealInput[] | DealSourceUncheckedCreateWithoutDealInput[]
    connectOrCreate?: DealSourceCreateOrConnectWithoutDealInput | DealSourceCreateOrConnectWithoutDealInput[]
    createMany?: DealSourceCreateManyDealInputEnvelope
    connect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
  }

  export type DealSourceUncheckedCreateNestedManyWithoutDealInput = {
    create?: XOR<DealSourceCreateWithoutDealInput, DealSourceUncheckedCreateWithoutDealInput> | DealSourceCreateWithoutDealInput[] | DealSourceUncheckedCreateWithoutDealInput[]
    connectOrCreate?: DealSourceCreateOrConnectWithoutDealInput | DealSourceCreateOrConnectWithoutDealInput[]
    createMany?: DealSourceCreateManyDealInputEnvelope
    connect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DealSourceUpdateManyWithoutDealNestedInput = {
    create?: XOR<DealSourceCreateWithoutDealInput, DealSourceUncheckedCreateWithoutDealInput> | DealSourceCreateWithoutDealInput[] | DealSourceUncheckedCreateWithoutDealInput[]
    connectOrCreate?: DealSourceCreateOrConnectWithoutDealInput | DealSourceCreateOrConnectWithoutDealInput[]
    upsert?: DealSourceUpsertWithWhereUniqueWithoutDealInput | DealSourceUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: DealSourceCreateManyDealInputEnvelope
    set?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    disconnect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    delete?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    connect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    update?: DealSourceUpdateWithWhereUniqueWithoutDealInput | DealSourceUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: DealSourceUpdateManyWithWhereWithoutDealInput | DealSourceUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: DealSourceScalarWhereInput | DealSourceScalarWhereInput[]
  }

  export type DealSourceUncheckedUpdateManyWithoutDealNestedInput = {
    create?: XOR<DealSourceCreateWithoutDealInput, DealSourceUncheckedCreateWithoutDealInput> | DealSourceCreateWithoutDealInput[] | DealSourceUncheckedCreateWithoutDealInput[]
    connectOrCreate?: DealSourceCreateOrConnectWithoutDealInput | DealSourceCreateOrConnectWithoutDealInput[]
    upsert?: DealSourceUpsertWithWhereUniqueWithoutDealInput | DealSourceUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: DealSourceCreateManyDealInputEnvelope
    set?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    disconnect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    delete?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    connect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    update?: DealSourceUpdateWithWhereUniqueWithoutDealInput | DealSourceUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: DealSourceUpdateManyWithWhereWithoutDealInput | DealSourceUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: DealSourceScalarWhereInput | DealSourceScalarWhereInput[]
  }

  export type DealCreateNestedOneWithoutSourcesInput = {
    create?: XOR<DealCreateWithoutSourcesInput, DealUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: DealCreateOrConnectWithoutSourcesInput
    connect?: DealWhereUniqueInput
  }

  export type InventoryCreateNestedOneWithoutDealSourcesInput = {
    create?: XOR<InventoryCreateWithoutDealSourcesInput, InventoryUncheckedCreateWithoutDealSourcesInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutDealSourcesInput
    connect?: InventoryWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DealUpdateOneRequiredWithoutSourcesNestedInput = {
    create?: XOR<DealCreateWithoutSourcesInput, DealUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: DealCreateOrConnectWithoutSourcesInput
    upsert?: DealUpsertWithoutSourcesInput
    connect?: DealWhereUniqueInput
    update?: XOR<XOR<DealUpdateToOneWithWhereWithoutSourcesInput, DealUpdateWithoutSourcesInput>, DealUncheckedUpdateWithoutSourcesInput>
  }

  export type InventoryUpdateOneRequiredWithoutDealSourcesNestedInput = {
    create?: XOR<InventoryCreateWithoutDealSourcesInput, InventoryUncheckedCreateWithoutDealSourcesInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutDealSourcesInput
    upsert?: InventoryUpsertWithoutDealSourcesInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutDealSourcesInput, InventoryUpdateWithoutDealSourcesInput>, InventoryUncheckedUpdateWithoutDealSourcesInput>
  }

  export type DealSourceCreateNestedManyWithoutInventoryInput = {
    create?: XOR<DealSourceCreateWithoutInventoryInput, DealSourceUncheckedCreateWithoutInventoryInput> | DealSourceCreateWithoutInventoryInput[] | DealSourceUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: DealSourceCreateOrConnectWithoutInventoryInput | DealSourceCreateOrConnectWithoutInventoryInput[]
    createMany?: DealSourceCreateManyInventoryInputEnvelope
    connect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
  }

  export type DealSourceUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<DealSourceCreateWithoutInventoryInput, DealSourceUncheckedCreateWithoutInventoryInput> | DealSourceCreateWithoutInventoryInput[] | DealSourceUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: DealSourceCreateOrConnectWithoutInventoryInput | DealSourceCreateOrConnectWithoutInventoryInput[]
    createMany?: DealSourceCreateManyInventoryInputEnvelope
    connect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
  }

  export type DealSourceUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<DealSourceCreateWithoutInventoryInput, DealSourceUncheckedCreateWithoutInventoryInput> | DealSourceCreateWithoutInventoryInput[] | DealSourceUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: DealSourceCreateOrConnectWithoutInventoryInput | DealSourceCreateOrConnectWithoutInventoryInput[]
    upsert?: DealSourceUpsertWithWhereUniqueWithoutInventoryInput | DealSourceUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: DealSourceCreateManyInventoryInputEnvelope
    set?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    disconnect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    delete?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    connect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    update?: DealSourceUpdateWithWhereUniqueWithoutInventoryInput | DealSourceUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: DealSourceUpdateManyWithWhereWithoutInventoryInput | DealSourceUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: DealSourceScalarWhereInput | DealSourceScalarWhereInput[]
  }

  export type DealSourceUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<DealSourceCreateWithoutInventoryInput, DealSourceUncheckedCreateWithoutInventoryInput> | DealSourceCreateWithoutInventoryInput[] | DealSourceUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: DealSourceCreateOrConnectWithoutInventoryInput | DealSourceCreateOrConnectWithoutInventoryInput[]
    upsert?: DealSourceUpsertWithWhereUniqueWithoutInventoryInput | DealSourceUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: DealSourceCreateManyInventoryInputEnvelope
    set?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    disconnect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    delete?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    connect?: DealSourceWhereUniqueInput | DealSourceWhereUniqueInput[]
    update?: DealSourceUpdateWithWhereUniqueWithoutInventoryInput | DealSourceUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: DealSourceUpdateManyWithWhereWithoutInventoryInput | DealSourceUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: DealSourceScalarWhereInput | DealSourceScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DealSourceCreateWithoutDealInput = {
    id?: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
    inventory: InventoryCreateNestedOneWithoutDealSourcesInput
  }

  export type DealSourceUncheckedCreateWithoutDealInput = {
    id?: string
    inventoryId: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
  }

  export type DealSourceCreateOrConnectWithoutDealInput = {
    where: DealSourceWhereUniqueInput
    create: XOR<DealSourceCreateWithoutDealInput, DealSourceUncheckedCreateWithoutDealInput>
  }

  export type DealSourceCreateManyDealInputEnvelope = {
    data: DealSourceCreateManyDealInput | DealSourceCreateManyDealInput[]
  }

  export type DealSourceUpsertWithWhereUniqueWithoutDealInput = {
    where: DealSourceWhereUniqueInput
    update: XOR<DealSourceUpdateWithoutDealInput, DealSourceUncheckedUpdateWithoutDealInput>
    create: XOR<DealSourceCreateWithoutDealInput, DealSourceUncheckedCreateWithoutDealInput>
  }

  export type DealSourceUpdateWithWhereUniqueWithoutDealInput = {
    where: DealSourceWhereUniqueInput
    data: XOR<DealSourceUpdateWithoutDealInput, DealSourceUncheckedUpdateWithoutDealInput>
  }

  export type DealSourceUpdateManyWithWhereWithoutDealInput = {
    where: DealSourceScalarWhereInput
    data: XOR<DealSourceUpdateManyMutationInput, DealSourceUncheckedUpdateManyWithoutDealInput>
  }

  export type DealSourceScalarWhereInput = {
    AND?: DealSourceScalarWhereInput | DealSourceScalarWhereInput[]
    OR?: DealSourceScalarWhereInput[]
    NOT?: DealSourceScalarWhereInput | DealSourceScalarWhereInput[]
    id?: StringFilter<"DealSource"> | string
    dealId?: StringFilter<"DealSource"> | string
    inventoryId?: StringFilter<"DealSource"> | string
    quantityUsed?: FloatFilter<"DealSource"> | number
    costPerKg?: FloatFilter<"DealSource"> | number
    supplierName?: StringFilter<"DealSource"> | string
    selectionOrder?: IntFilter<"DealSource"> | number
    createdAt?: DateTimeFilter<"DealSource"> | Date | string
  }

  export type DealCreateWithoutSourcesInput = {
    id?: string
    date: string
    saleParty: string
    quantitySold: number
    saleRate: number
    deliveryTerms: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    saleSource: string
    purchaseParty: string
    purchaseQuantity: number
    purchaseRate: number
    saleComments?: string | null
    purchaseComments?: string | null
    finalComments?: string | null
    warehouse?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DealUncheckedCreateWithoutSourcesInput = {
    id?: string
    date: string
    saleParty: string
    quantitySold: number
    saleRate: number
    deliveryTerms: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    saleSource: string
    purchaseParty: string
    purchaseQuantity: number
    purchaseRate: number
    saleComments?: string | null
    purchaseComments?: string | null
    finalComments?: string | null
    warehouse?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DealCreateOrConnectWithoutSourcesInput = {
    where: DealWhereUniqueInput
    create: XOR<DealCreateWithoutSourcesInput, DealUncheckedCreateWithoutSourcesInput>
  }

  export type InventoryCreateWithoutDealSourcesInput = {
    id?: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    quantity: number
    rate: number
    purchaseParty: string
    dateAdded: string
    createdAt?: Date | string
  }

  export type InventoryUncheckedCreateWithoutDealSourcesInput = {
    id?: string
    productCode: string
    grade: string
    company: string
    specificGrade: string
    quantity: number
    rate: number
    purchaseParty: string
    dateAdded: string
    createdAt?: Date | string
  }

  export type InventoryCreateOrConnectWithoutDealSourcesInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutDealSourcesInput, InventoryUncheckedCreateWithoutDealSourcesInput>
  }

  export type DealUpsertWithoutSourcesInput = {
    update: XOR<DealUpdateWithoutSourcesInput, DealUncheckedUpdateWithoutSourcesInput>
    create: XOR<DealCreateWithoutSourcesInput, DealUncheckedCreateWithoutSourcesInput>
    where?: DealWhereInput
  }

  export type DealUpdateToOneWithWhereWithoutSourcesInput = {
    where?: DealWhereInput
    data: XOR<DealUpdateWithoutSourcesInput, DealUncheckedUpdateWithoutSourcesInput>
  }

  export type DealUpdateWithoutSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    saleParty?: StringFieldUpdateOperationsInput | string
    quantitySold?: FloatFieldUpdateOperationsInput | number
    saleRate?: FloatFieldUpdateOperationsInput | number
    deliveryTerms?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    saleSource?: StringFieldUpdateOperationsInput | string
    purchaseParty?: StringFieldUpdateOperationsInput | string
    purchaseQuantity?: FloatFieldUpdateOperationsInput | number
    purchaseRate?: FloatFieldUpdateOperationsInput | number
    saleComments?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseComments?: NullableStringFieldUpdateOperationsInput | string | null
    finalComments?: NullableStringFieldUpdateOperationsInput | string | null
    warehouse?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealUncheckedUpdateWithoutSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    saleParty?: StringFieldUpdateOperationsInput | string
    quantitySold?: FloatFieldUpdateOperationsInput | number
    saleRate?: FloatFieldUpdateOperationsInput | number
    deliveryTerms?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    saleSource?: StringFieldUpdateOperationsInput | string
    purchaseParty?: StringFieldUpdateOperationsInput | string
    purchaseQuantity?: FloatFieldUpdateOperationsInput | number
    purchaseRate?: FloatFieldUpdateOperationsInput | number
    saleComments?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseComments?: NullableStringFieldUpdateOperationsInput | string | null
    finalComments?: NullableStringFieldUpdateOperationsInput | string | null
    warehouse?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUpsertWithoutDealSourcesInput = {
    update: XOR<InventoryUpdateWithoutDealSourcesInput, InventoryUncheckedUpdateWithoutDealSourcesInput>
    create: XOR<InventoryCreateWithoutDealSourcesInput, InventoryUncheckedCreateWithoutDealSourcesInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutDealSourcesInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutDealSourcesInput, InventoryUncheckedUpdateWithoutDealSourcesInput>
  }

  export type InventoryUpdateWithoutDealSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    purchaseParty?: StringFieldUpdateOperationsInput | string
    dateAdded?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryUncheckedUpdateWithoutDealSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    productCode?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    specificGrade?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    purchaseParty?: StringFieldUpdateOperationsInput | string
    dateAdded?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealSourceCreateWithoutInventoryInput = {
    id?: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
    deal: DealCreateNestedOneWithoutSourcesInput
  }

  export type DealSourceUncheckedCreateWithoutInventoryInput = {
    id?: string
    dealId: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
  }

  export type DealSourceCreateOrConnectWithoutInventoryInput = {
    where: DealSourceWhereUniqueInput
    create: XOR<DealSourceCreateWithoutInventoryInput, DealSourceUncheckedCreateWithoutInventoryInput>
  }

  export type DealSourceCreateManyInventoryInputEnvelope = {
    data: DealSourceCreateManyInventoryInput | DealSourceCreateManyInventoryInput[]
  }

  export type DealSourceUpsertWithWhereUniqueWithoutInventoryInput = {
    where: DealSourceWhereUniqueInput
    update: XOR<DealSourceUpdateWithoutInventoryInput, DealSourceUncheckedUpdateWithoutInventoryInput>
    create: XOR<DealSourceCreateWithoutInventoryInput, DealSourceUncheckedCreateWithoutInventoryInput>
  }

  export type DealSourceUpdateWithWhereUniqueWithoutInventoryInput = {
    where: DealSourceWhereUniqueInput
    data: XOR<DealSourceUpdateWithoutInventoryInput, DealSourceUncheckedUpdateWithoutInventoryInput>
  }

  export type DealSourceUpdateManyWithWhereWithoutInventoryInput = {
    where: DealSourceScalarWhereInput
    data: XOR<DealSourceUpdateManyMutationInput, DealSourceUncheckedUpdateManyWithoutInventoryInput>
  }

  export type DealSourceCreateManyDealInput = {
    id?: string
    inventoryId: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
  }

  export type DealSourceUpdateWithoutDealInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: InventoryUpdateOneRequiredWithoutDealSourcesNestedInput
  }

  export type DealSourceUncheckedUpdateWithoutDealInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealSourceUncheckedUpdateManyWithoutDealInput = {
    id?: StringFieldUpdateOperationsInput | string
    inventoryId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealSourceCreateManyInventoryInput = {
    id?: string
    dealId: string
    quantityUsed: number
    costPerKg: number
    supplierName: string
    selectionOrder: number
    createdAt?: Date | string
  }

  export type DealSourceUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deal?: DealUpdateOneRequiredWithoutSourcesNestedInput
  }

  export type DealSourceUncheckedUpdateWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    dealId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DealSourceUncheckedUpdateManyWithoutInventoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    dealId?: StringFieldUpdateOperationsInput | string
    quantityUsed?: FloatFieldUpdateOperationsInput | number
    costPerKg?: FloatFieldUpdateOperationsInput | number
    supplierName?: StringFieldUpdateOperationsInput | string
    selectionOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use DealCountOutputTypeDefaultArgs instead
     */
    export type DealCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DealCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryCountOutputTypeDefaultArgs instead
     */
    export type InventoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DealDefaultArgs instead
     */
    export type DealArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DealDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DealSourceDefaultArgs instead
     */
    export type DealSourceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DealSourceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SalePartyDefaultArgs instead
     */
    export type SalePartyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SalePartyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PurchasePartyDefaultArgs instead
     */
    export type PurchasePartyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PurchasePartyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryDefaultArgs instead
     */
    export type InventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}